/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT FALSE 0
#DEFINE_CONSTANT TRUE  1
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Clear, Backspace; 
ANALOG_INPUT MaxChars, KeyboardChar; 
STRING_INPUT Text_In$[50]; 
// BUFFER_INPUT 

DIGITAL_OUTPUT StringLenIsZero;
//ANALOG_OUTPUT Save_Mode;
STRING_OUTPUT Text_Out$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING g_sText[50];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Clear
{
  g_sText = "";
  Text_Out$ = "";
  StringLenIsZero = TRUE;
  
}

PUSH Backspace
{
  if (len(g_sText) > 0)
  {
    g_sText = left(g_stext, len(g_sText) - 1);
    Text_Out$ = g_sText;
   
	  if (len(g_sText) = 0)
	  {
	    //String Length is now zero
	    StringLenIsZero = TRUE;
	  }
	  else
	  {
	    StringLenIsZero = FALSE;
	  }
  }
}

CHANGE KeyboardChar
{
  //Cannot start with leading spaces
  if ( (len(g_sText) = 0) && (chr(KeyboardChar) = " ") )
  {
    //Do Nothing
    return;
  }

  if (len(g_sText) < MaxChars)
  {
    g_sText = g_sText + chr(KeyboardChar);
    Text_Out$ = g_sText;
    StringLenIsZero = FALSE;
  }
}

CHANGE Text_In$
{
  g_sText = Text_In$;
  Text_Out$ = g_sText;
  
  if (len(g_sText) = 0)
  {
    StringLenIsZero = TRUE;
  }
  else
  {
    StringLenIsZero = FALSE;
  }
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{

  WaitForInitializationComplete();
  g_sText = "";
  Text_Out$ = "";
}


