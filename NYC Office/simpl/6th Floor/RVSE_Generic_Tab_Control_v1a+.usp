/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 	1
#DEFINE_CONSTANT FALSE	0

#DEFINE_CONSTANT MAX_TABS	5
#DEFINE_CONSTANT MAX_TAB_LABEL_LEN	25

#DEFINE_CONSTANT MODE_HIDDEN	0
#DEFINE_CONSTANT MODE_ENABLE	1
#DEFINE_CONSTANT MODE_DISABLE	2 
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
							Enable; 
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
ANALOG_OUTPUT Tab_Qty; 
// STRING_OUTPUT

// ** Array Defs **
DIGITAL_INPUT Show_Function[MAX_TABS],
							Enable_Function[MAX_TABS];
														
STRING_INPUT Tab_Label_In$[MAX_TABS][MAX_TAB_LABEL_LEN];

ANALOG_OUTPUT Tab_Mode[MAX_TABS],
							Tab_Function_Value[MAX_TABS];

STRING_OUTPUT Tab_Label_Out$[MAX_TABS]; 


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_iTabCount, g_iTabFunctionValue[MAX_TABS];
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function UpdateOutputs(integer iFunction)
{
	integer i,
					iShowCount;
	
	if (Debug)
	{
		print ("\n** UpdateOutputs **\n");
		print ("  Function:%u\n", iFunction);
		print ("  TabCount:%u\n", g_iTabCount);
	}
	
	
	iShowCount = 0;
	
	if (iFunction = 0)
	{
		// Update all outputs
	  
	  if (Debug)
	  {
	  	print ("  Update all outputs.\n");
	  }
	  
		for (i = 1 to g_iTabCount)
		{	
			// Show function?
			if (Show_Function[i])
			{
				// Yes, show function.
			  
			  if (Debug)
			  {
			  	print ("  Show Function:%u\n", i);
			  }
			  
				iShowCount = iShowCount + 1;
			  
			  // Assign tab to function
			  g_iTabFunctionValue[iShowCount] = i;
			  Tab_Function_Value[iShowCount] = i;
			  
				// Which mode?
				if (Enable_Function[i])
				{
					// Mode enable.
					Tab_Mode[iShowCount] = MODE_ENABLE;
				}
				else
				{
					// Mode disable.
					Tab_Mode[iShowCount] = MODE_DISABLE;
				}
			  
			  // Set label.
				Tab_Label_Out$[iShowCount] = Tab_Label_In$[i];
			}	
		}
		
		Tab_Qty = iShowCount;
		
		// Cleanup
		if (iShowCount < g_iTabCount)
		{
			for (i = iShowCount + 1 to g_iTabCount)
			{
				Tab_Mode[i] = MODE_HIDDEN;
				Tab_Label_Out$[i] = "";
			}
		}
	}
	else
	{
		// Only update tab associated with function. 
		
		if (Debug)
		{
			print ("  Only update tab associated with function.\n");
		}
		
		// Find tab assigned to function.
		for (i = 1 to g_iTabCount)
		{
			if (g_iTabFunctionValue[i] = iFunction)
			{
				// Found the tab.
				
				if (Enable_Function[iFunction])
				{
					Tab_Mode[i] = MODE_ENABLE;
				}
				else
				{
					Tab_Mode[i] = MODE_DISABLE;
				}
				
				break;
			}
		}
	}
}

Function TabCount()
{
	integer i;
	
	if (Debug)
	 print ("\n** TabCount **\n");
	
	g_iTabCount = 0;
	
	// Count valid outputs
	for (i = 1 to MAX_TABS)
	{		
		if (issignaldefined(Tab_Label_Out$[i]))
		{
			g_iTabCount = g_iTabCount + 1;
		}
		else
		{
			break;			
		}
	}
		
	if (Debug)
	 print ("  Tab Count:%u\n", g_iTabCount);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Enable
{
	integer i;
	
	call TabCount();
	
	// Clear valid outputs
	for (i = 1 to g_iTabCount)
	{
		Tab_Mode[i] = MODE_HIDDEN;
		Tab_Function_Value[i] = 0;
		Tab_Label_Out$[i] = "";		
	}
	
	call UpdateOutputs(0);
}

PUSH Show_Function
{
	if (Enable)
	 call UpdateOutputs(0);
}

RELEASE Show_Function
{
	if (Enable)
	 call UpdateOutputs(0);
}

PUSH Enable_Function
{
	integer iIndex;
	
	
	
	if (Enable)
	{
		iIndex = getlastmodifiedarrayindex();
		call UpdateOutputs(iIndex);
	}
}

RELEASE Enable_Function
{
	integer iIndex;
	
	
	
	if (Enable)
	{
		iIndex = getlastmodifiedarrayindex();
		call UpdateOutputs(iIndex);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	Tab_Qty = 0;
}


