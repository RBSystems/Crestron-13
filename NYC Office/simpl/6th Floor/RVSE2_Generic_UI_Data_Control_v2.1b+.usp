/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE		1
#DEFINE_CONSTANT FALSE	0

#DEFINE_CONSTANT MAX_FIELDS		48
#DEFINE_CONSTANT MAX_TEXT_LEN	75

#DEFINE_CONSTANT MAX_TIME_FIELDS 24
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
              Time_Format,
							First_Page,
							Current_Time_Page,
							Page_Prev,
							Page_Next,
							Update_Outputs,
							Select_Up,
							Select_Down;
 
ANALOG_INPUT Current_Time_Hour,
						 Current_Time_Min,
						 UI_Field_Qty,
						 UI_Field_Time_Resolution;
						  
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT Current_Time_Within_Page,
							 Enable_Page_Prev,
							 Enable_Page_Next;
 
ANALOG_OUTPUT Current_Page,
							Selected_Position;
							 
// STRING_OUTPUT

// ** Array Defs **
ANALOG_INPUT Analog[MAX_FIELDS];
STRING_INPUT Text$[MAX_FIELDS][MAX_TEXT_LEN];

ANALOG_OUTPUT Page_Analog[MAX_FIELDS];
STRING_OUTPUT Page_Text$[MAX_FIELDS];
STRING_OUTPUT Time_Label_A$[MAX_TIME_FIELDS];
STRING_OUTPUT Time_Label_B$[MAX_TIME_FIELDS]; 



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_iPageQty,
				g_iBargraphUnit;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
//STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

/////////////////////////////////////////////////////////////////////
//
// Function: IToLA()
//
// Parameters: Number as Integer (2 digit only)
//
// Return Value: Number as String
//
// Description: Converts a 2-digit integer to string with leading zeros
//
//
/////////////////////////////////////////////////////////////////////
String_Function IToLA(integer iNumber)
{
	string sNumber[2];
	
	if (iNumber < 10)
	{
		sNumber = "0" + itoa(iNumber);
	}
	else
	{
		sNumber = itoa(iNumber);
	}
	
	return (sNumber);
}

Function UpdateOutputs()
{
	integer i,
					iFieldOffset,
					iIndex;
					
	integer iTimeHour,
					iTimeLabelQty,
					iTimeOffset;
	
	if (Debug)
	{
		trace ("\n** UpdateOutputs **\n");
	}
  
  
  
	if (Current_Page > 0 && UI_Field_Qty > 0)
	{
		// Calculate the time label qty
		iTimeLabelQty = UI_Field_Qty / (60 / UI_Field_Time_Resolution); 
		
		// Calculate the time offset
		iTimeOffset = (Current_Page * iTimeLabelQty) - iTImeLabelQty;

	  
	  // Update the time labels.
	  for (i = 1 to iTimeLabelQty)
	  {
	  	// Calculate time.
	  	iTimeHour = i + iTimeOffset - 1;
	  	
	  	// Time < 24?
	  	if (iTimeHour < 24)
	  	{	
        if (Time_Format)
        {
          Time_Label_A$[i] = ItoLA(iTimeHour);
          Time_label_B$[i] = "00";
        }
        else
        {
	        // Time before 12?
			  	if (iTimeHour < 12)
			  	{
			  		// Yes, time is before 12.
			  		
			  		// Set the hour value.
			  		
			  		// If time = 0, set output = "12"
			  		if (iTimeHour = 0)
			  		 Time_Label_A$[i] = "12";
			  		else
			  		 Time_Label_A$[i] = itoa(iTimeHour);
			  		 
			  		// First field?
			  		if (i = 1)
			  		 Time_Label_B$[i] = "AM";
			  		else
			  		 Time_Label_B$[i] = "00";
			  	}
			  	else if (iTimeHour = 12)
			  	{
			  		// Time is = 12.
			  		
			  		Time_Label_A$[i] = "12";
			  		Time_Label_B$[i] = "PM";	  		
			  	}
			  	else
			  	{
			  		// Time is > 12.
			  		
			  		Time_Label_A$[i] = itoa(iTimeHour - 12);
			  		
			  		// First field?
			  		if (i = 1)
			  		 Time_Label_B$[i] = "PM";
			  		else
			  		 Time_Label_B$[i] = "00";
			  	}
			  }  
      }  	
		  else
		  {
		  	// Time >= 24, clear fields.
				Time_Label_A$[i] = "";
		  	Time_Label_B$[i] = "";		  	
		  } 	
	  }

		// Calculate field offset
		iFieldOffset = (Current_Page * UI_Field_Qty) - UI_Field_Qty;
			  
		// Update the fields.
		for (i = 1 to UI_Field_Qty)
		{
			iIndex = i + iFieldOffset;
			
      if (Debug)
      {
	      trace ("  i:%u\n", i);
        trace ("  iIndex:%u\n", iIndex);
			}
      
      if (iIndex <= MAX_FIELDS)
			{
				Page_Analog[i] = Analog[iIndex];
				Page_Text$[i] = Text$[iIndex];
			}
			else
			{
				Page_Analog[i] = 0;
				Page_Text$[i] = "";			
			}		
		}
	}
}

Function SetEnableButtons()
{
	if (Debug)
	{
		trace ("\n** SetEnableButtons **\n");
		trace ("  PageQty:%u\n", g_iPageQty);
		trace ("  CurrentPage:%u\n", Current_Page);
	}
	
	if (g_iPageQty > 1)
	{
		if (Current_Page > 1)
		{
			Enable_Page_Prev = TRUE;
		}
		else
		{
			Enable_Page_Prev = FALSE;
		}
		
		if (Current_Page < g_iPageQty)
		{
			Enable_Page_Next = TRUE;
		}
		else
		{
			Enable_Page_Next = FALSE;
		}
	}
	else
	{
		Enable_Page_Prev = FALSE;
		Enable_Page_Next = FALSE;
	}
}

Function SetCurrentTimeWithinPage()
{
	integer iMinutesPerPage,
					iCurrentTimeMinutes,
					iCurrentPageStartMinutes,
					iCurrentPageEndMinutes;
	
	if (Debug)
	{
		trace ("\n** SetCurrentTimeWithinPage **\n");
	}
	
	iMinutesPerPage = UI_Field_Qty * UI_Field_Time_Resolution;
	
	iCurrentPageStartMinutes = (Current_Page * iMinutesPerPage) - iMinutesPerPage;
	iCurrentPageEndMinutes = Current_Page * iMinutesPerPage;
		
	iCurrentTimeMinutes = (Current_Time_Hour * 60) + Current_Time_Min;
	
	// Current time within page?
	if (iCurrentTimeMinutes >= iCurrentPageStartMinutes &&
		iCurrentTimeMinutes <= iCurrentPageEndMinutes)
	{
		Current_Time_Within_Page = TRUE;		
	}
	else
	{
		Current_Time_Within_Page = FALSE;
	}
}

Function SetCurrentTimePage()
{
	integer i,
					iMinutesPerPage,
					iCurrentTimeMinutes,
					iCurrentPageStartMinutes,
					iCurrentPageEndMinutes;
	
	if (Debug)
	{
		trace ("\n** SetCurrentTimePage **\n");
	}
	
	iMinutesPerPage = UI_Field_Qty * UI_Field_Time_Resolution;
	
	iCurrentTimeMinutes = (Current_Time_Hour * 60) + Current_Time_Min;
	
	for (i = 1 to g_iPageQty)
	{	
		iCurrentPageStartMinutes = (i * iMinutesPerPage) - iMinutesPerPage;
		iCurrentPageEndMinutes = i * iMinutesPerPage;
		
		if (iCurrentTimeMinutes >= iCurrentPageStartMinutes &&
		 iCurrentTimeMinutes <= iCurrentPageEndMinutes)
		{
			Current_Page = i;
			break;
		}
	}
		
		
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Current_Time_Hour
{
	call SetCurrentTimeWithinPage();
}

CHANGE Current_Time_Min
{
	call SetCurrentTimeWithinPage();
}

PUSH First_Page
{
	Current_Page = 1;
	
	call SetEnableButtons();
	
	call UpdateOutputs();
	
	call SetCurrentTimeWithinPage();
}

PUSH Current_Time_Page
{
	call SetCurrentTimePage();
	
	call SetEnableButtons();
	
	Current_Time_Within_Page = TRUE;	
}

PUSH Page_Prev
{
	if (Current_Page > 1)
	{
		Current_Page = Current_Page - 1;
		
		call SetEnableButtons();
		
		call UpdateOutputs();
		
		call SetCurrentTimeWithinPage();
	}
}

PUSH Page_Next
{
	if (Current_Page < g_iPageQty)
	{
		Current_Page = Current_Page + 1;
		
		call SetEnableButtons();
		
		call UpdateOutputs();
		
		call SetCurrentTimeWithinPage();
	}
}

PUSH Update_Outputs
{
	call UpdateOutputs();
}

CHANGE UI_Field_Qty
{
	// Calculate pages
	
	g_iPageQty = MAX_FIELDS / UI_Field_Qty;
	g_iBargraphUnit = 65535 / UI_Field_Qty;
	
	if (MAX_FIELDS mod UI_Field_Qty)
	{
		g_iPageQty = g_iPageQty + 1;
	}
	
	if (Debug)
	{
		trace ("UI Field Qty Change.\n");
		trace ("  MaxFields:%u\n", MAX_FIELDS);
		trace ("  UIFieldQty:%u\n", UI_Field_Qty);
		trace ("  PageQty:%u\n", g_iPageQty);
	}
	
	call SetEnableButtons();
}

PUSH Select_Up
{
	// Select position > 1
	if (Selected_Position > 1)
	{
		// Yes, select position > 1.
		
		Selected_Position = Selected_Position - 1;
	}
	else
	{
		// Select position not > 1.
		
		// Check if we can goto previous page?
		if (Current_Page > 1)
		{
			// Yes, we can goto previous page.
		  
		  Selected_Position = UI_Field_Qty;
		  
			Current_Page = Current_Page - 1;
		
			call SetEnableButtons();
		
			call UpdateOutputs();
		
			call SetCurrentTimeWithinPage();			
		}
	}
}

PUSH Select_Down
{
	// Select position < UI_Field_Qty?
	if (Selected_Position < UI_Field_Qty)
	{
		// Yes, select position < UI_Field_Qty.
		
		Selected_Position = Selected_Position + 1;
	}
	else
	{
		// Select position = UI_Field_Qty
		
		// Check is we can goto next page?
		if (Current_Page < g_iPageQty)
		{
			// Yes, we can goto next page.
      
      Selected_Position = 1;
			
			Current_Page = Current_Page + 1;
		
			call SetEnableButtons();
		
			call UpdateOutputs();
		
			call SetCurrentTimeWithinPage();			
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	integer i;
	
	WaitForInitializationComplete();
  
  Current_Page = 1;
  
  Current_Time_Within_Page = FALSE;
  
  Enable_Page_Prev = FALSE;
  Enable_Page_Next = FALSE;
  
 	Selected_Position = 0;
}


