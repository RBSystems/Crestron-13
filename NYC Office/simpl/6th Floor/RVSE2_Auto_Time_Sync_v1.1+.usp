/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 	1
#DEFINE_CONSTANT FALSE	0
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
						  Get_Date_Time,
							Sync_Date_Time,
							Timeout;
 
//ANALOG_INPUT
 
STRING_INPUT Time_Zone$[100];
 
BUFFER_INPUT From_RV_LocalDateTimeResponse$[255]; 

DIGITAL_OUTPUT Busy; 

ANALOG_OUTPUT Current_Time_Hour,
						  Current_Time_Minute;
						   
STRING_OUTPUT To_RV_LocalDateTimeQuery$,
							Current_Date_Time$,
							Auto_Sync_Time$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

INTEGER g_bRXOK;

INTEGER g_iSeedValue,
				g_iRandomOffset;
				
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER

STRING g_sRequestID[30],
			 g_sData[255];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ProcessData()
{
	string sRemoved[255],
				 sDate[11],
				 sTime[8];
				 
	integer iMonth,
					iDay,
					iYear,
					iHours,
					iMinutes, 
					iSeconds;
	
	if (Debug)
	{
		print ("\n** ProcessData **\n");
	}
	
	do
	{
		
		sRemoved = remove(">", g_sData);
		
		if (Debug)
		{
			print ("  Data:%s\n", sRemoved);
		}
		
		if (find("</LocalDateTime>", sRemoved))
		{
			sRemoved = left (sRemoved, len(sRemoved) - 16);
			
			sDate = left(sRemoved, 10);
			
			iMonth = atoi(mid(sDate, 6, 2));
			iDay = atoi(right(sDate, 2));
			iYear = atoi(left(sDate, 4));
			
			SetDate(iMonth, iDay, iYear); 
			
			sTime = right(sRemoved, 8);
			
			iHours = atoi(left(sTime, 2));
			iMinutes = atoi(mid(sTime, 4, 2));
			iSeconds = atoi(right(sTime, 2));
			
			SetClock(iHours, iMinutes, iSeconds);
			
			iHours = gethournum();
			iMinutes = getminutesnum();
	
			Current_Time_Hour = iHours;
			Current_Time_Minute = iMinutes;
			Current_Date_Time$ = date(1) + " " + time();
			
			if (Debug)
			{
				print ("  Month:%u\n", iMonth);
				print ("  Day:%u\n", iDay);
				print ("  Year:%u\n", iYear);
				print ("  Hours:%u\n", iHours);
				print ("  Minutes:%u\n", iMinutes);
				print ("  Seconds:%u\n", iSeconds);
			}			 			
		}
		
	} until (len(g_sData) = 0);
	
	Busy = FALSE;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Timeout
{
	Busy = FALSE;
}


PUSH Get_Date_Time
{
	integer iHour,
					iMinute;
	
	iHour = gethournum();
	iMinute = getminutesnum();
	
	Current_Time_Hour = iHour;
	Current_Time_Minute = iMinute;
	Current_Date_Time$ = date(1) + " " + time();
	
}

PUSH Sync_Date_Time
{
	if (!Busy)
	{
	  Busy = TRUE;
	  
		g_sRequestID = "FORCELTR" + itoa(gethseconds());
  	
  	To_RV_LocalDateTimeQuery$ =
  		"<LocalTimeRequest>" +
  			"<RequestID>" + g_sRequestID + "</RequestID>" +
  		"</LocalTimeRequest>";
	}
}




CHANGE From_RV_LocalDateTimeResponse$
{
	if (g_bRXOK)
	{
		g_bRXOK = FALSE;
		
		while (find("</LocalTimeResponse>", From_RV_LocalDateTimeResponse$))
		{
			g_sData = remove("</LocalTimeResponse>", From_RV_LocalDateTimeResponse$);
			
			if (find(g_sRequestID, g_sData))
			{
				call ProcessData();
			}
		}
		
		g_bRXOK = TRUE;
	}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
	
	g_bRXOK = TRUE;

}


