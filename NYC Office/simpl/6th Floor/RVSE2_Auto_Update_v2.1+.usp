/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 	1	
#DEFINE_CONSTANT FALSE 	0
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#PRINT_TO_TRACE
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT Debug,
						  Debug_Print_Offset,
							Initialize,
							RoomView_Online_FB; 

ANALOG_INPUT Current_Time_Hour,
             Current_Time_Minute,
             Auto_Update_System_Hour,
             Auto_Update_Push_Hour,
             Auto_Update_Date_Time_Hour;
 
//STRING_INPUT Mac_Address$[17]; 
// BUFFER_INPUT 

DIGITAL_OUTPUT Need_Auto_Update_System_FB,
							 Need_Auto_Update_Push_FB,
							 Need_Auto_Update_Date_Time_FB,
							 RoomView_Online_FBD; 
// ANALOG_OUTPUT 
STRING_OUTPUT Auto_Update_System_Time$,
							Auto_Update_Push_Time$,
							Auto_Update_Date_Time_Time$;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_iRandomOffset,
			  g_iRandomOffsetRV;
        
INTEGER g_iAutoSystemHour,
        g_iAutoPushHour,
        g_iAutoDateTimeHour,
        g_iAutoMin;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Debug_Print_Offset
{
  trace ("Auto Offset:%u\n", g_iRandomOffset);
  trace ("Auto RV Offset:%u\n", g_iRandomOffsetRV);
}

PUSH Initialize
{
  string sSystemTime[5],
  			 sPushTime[5],
  			 sDateTimeTime[5];
  
  if (Debug)
   trace ("Initialize\n");
  			 
  sSystemTime = "";
  sPushTime = "";
  
  seed(gethseconds());

	g_iRandomOffset = random(1, 119);
	g_iRandomOffsetRV = random(100, 500); 

  g_iAutoSystemHour = Auto_Update_System_Hour;
  g_iAutoPushHour = Auto_Update_Push_Hour;
  g_iAutoDateTimeHour = Auto_Update_Date_Time_Hour;
  
  if (g_iRandomOffset > 59)
  {
    g_iAutoSystemHour = g_iAutoSystemHour + 1;
    
    g_iAutoPushHour = g_iAutoPushHour + 1;
        
    g_iAutoDateTimeHour = g_iAutoDateTimeHour + 1;
    
    g_iAutoMin = g_iRandomOffset - 60;
  }
  else
  {
    g_iAutoMin = g_iRandomOffset;
  }
	
	sSystemTime = itoa(g_iAutoSystemHour);
	sPushTime = itoa(g_iAutoPushHour);
	sDateTimeTime = itoa(g_iAutoDateTimeHour);
	
	if (g_iAutoMin < 10)
	{
		Auto_Update_System_Time$ = sSystemTime + ":" + "0" + itoa(g_iAutoMin);
		Auto_Update_Push_Time$ = sPushTime + ":" + "0" + itoa(g_iAutoMin);
		Auto_Update_Date_Time_Time$ = sDateTimeTime + ":" + "0" + itoa(g_iAutoMin);		
	}
	else
	{
		Auto_Update_System_Time$ = sSystemTime + ":" + itoa(g_iAutoMin);
		Auto_Update_Push_Time$ = sPushTime + ":" + itoa(g_iAutoMin);
		Auto_Update_Date_Time_Time$ = sDateTimeTime + ":" + itoa(g_iAutoMin);		
	}  	
}

PUSH RoomView_Online_FB
{
	wait (g_iRandomOffsetRV, RoomViewDelay)
	{
		RoomView_Online_FBD = TRUE;
	}
}

RELEASE RoomView_Online_FB
{
	cancelwait(RoomViewDelay);
	
	RoomView_Online_FBD = FALSE;
}


CHANGE Current_Time_Minute
{
  if (Current_Time_Hour = g_iAutoSystemHour &&
   Current_Time_Minute = g_iAutoMin)
  {
    Need_Auto_Update_System_FB = TRUE;
  }
  else
  {
  	Need_Auto_Update_System_FB = FALSE;
  }
  
  if (Current_Time_Hour = g_iAutoPushHour &&
   Current_Time_Minute = g_iAutoMin)
  {
    Need_Auto_Update_Push_FB = TRUE;
  }
  else
  {
  	Need_Auto_Update_Push_FB = FALSE;
  }
  
  if (Current_Time_Hour = g_iAutoDateTimeHour &&
   Current_Time_Minute = g_iAutoMin)
  {
    Need_Auto_Update_Date_Time_FB = TRUE;
  }
  else
  {
  	Need_Auto_Update_Date_Time_FB = FALSE;
  }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
  
  Auto_Update_System_Time$ = "";
  Auto_Update_Push_Time$ = "";
  Auto_Update_Date_Time_Time$ = "";
}


