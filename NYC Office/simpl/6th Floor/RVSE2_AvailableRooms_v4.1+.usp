/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
//#SYMBOL_NAME

/*** VERSION HISTORY
   
  v1
  ====
   -initial release
   
  v1c
  ====
   -changed buffer processing to "while(1)" "gather"
   
****/   
   
   
// #HINT ""
#DEFINE_CONSTANT TRUE   1
#DEFINE_CONSTANT FALSE  0

#DEFINE_CONSTANT MAX_ROOMS                200
#DEFINE_CONSTANT MAX_ROOM_ID_LEN          50
#DEFINE_CONSTANT MAX_ROOM_NAME_LEN        50

#DEFINE_CONSTANT BUSY_STATUS 		1
#DEFINE_CONSTANT FREE_UNTIL  		2
#DEFINE_CONSTANT ONLINE_STATUS	3

#DEFINE_CONSTANT DATA_BUFF_SIZE	65000

#DEFINE_CONSTANT NODE_ROOT				0
#DEFINE_CONSTANT NODE_ROOM				1
#DEFINE_CONSTANT NODE_ATTRIBUTE		2

#DEFINE_CONSTANT ATTRIBUTE_ONLINE_STATUS	1
#DEFINE_CONSTANT ATTRIBUTE_FREE_UNTIL			2

#DEFINE_CONSTANT MAX_FREE_UNTIL_NAMES			5
#DEFINE_CONSTANT MAX_FREE_UNTIL_JOINS			5
#DEFINE_CONSTANT MAX_FREE_UNTIL_NAME_LEN	75
#DEFINE_CONSTANT MAX_FREE_UNTIL_JOIN_LEN	6

// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT Debug,
              RoomView_Online,
              Get_Available_Rooms,
              Get_Available_Rooms_Timeout,
              Time_Format;
 
// ANALOG_INPUT
 
STRING_INPUT FreeUntilAttributeNames$[200],
						 FreeUntilAttributeJoins$[200];
 
BUFFER_INPUT From_RV_RoomAttributeResponse$[DATA_BUFF_SIZE],
             From_Module_Room_List_Data$[DATA_BUFF_SIZE]; 

DIGITAL_OUTPUT Request_Active_FB,
							 Processing_Data_FB,
							 Sending_Available_Rooms_List_FB,
							 No_Available_Rooms_Found;
                
ANALOG_OUTPUT Available_Rooms_Count;

 
STRING_OUTPUT To_RV_RoomAttributeQuery$,
              To_Module_DataScroller_Data$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE Data1
{
  string RoomID[MAX_ROOM_ID_LEN];
  string RoomName[MAX_ROOM_NAME_LEN];
  string FreeUntil[40];
};

Data1 AvailableList[MAX_ROOMS];

STRUCTURE Data2
{
  string RoomID[MAX_ROOM_ID_LEN];
  string RoomName[MAX_ROOM_NAME_LEN];
};

Data2 RoomList[MAX_ROOMS];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK1,
				g_bRXOK2;

STRING g_sData1[DATA_BUFF_SIZE],
       g_sData2[DATA_BUFF_SIZE];

INTEGER g_iRoomListCount,
				g_iAvailableRoomsCount,
				g_iFreeUntilNameCount,
				g_iFreeUntilJoinCount;

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING g_sAttributeStatusRequestID[40];

STRING g_sFreeUntilAttributeName[MAX_FREE_UNTIL_NAMES][MAX_FREE_UNTIL_NAME_LEN],
			 g_sFreeUntilAttributeJoin[MAX_FREE_UNTIL_JOINS][MAX_FREE_UNTIL_JOIN_LEN];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

/////////////////////////////////////////////////////////////////////
//
// Function: IToLA()
//
// Parameters: Number as Integer (2 digit only)
//
// Return Value: Number as String
//
// Description: Converts a 2-digit integer to string with leading zeros
//
//
/////////////////////////////////////////////////////////////////////
String_Function IToLA(integer iNumber)
{
	string sNumber[2];
	
	if (iNumber < 10)
	{
		sNumber = "0" + itoa(iNumber);
	}
	else
	{
		sNumber = itoa(iNumber);
	}
	
	return (sNumber);
}

/////////////////////////////////////////////////////////////////////
//
// Function: FormatTime()
//
// Parameters: Data
//
// Return Value: Time
//
// Description: Returns formatted time based on type specified.
//
//
/////////////////////////////////////////////////////////////////////

String_Function FormatTime(string sData)
{
  integer iHour, iMinute;
  string sHour[2], sMinute[2], sAMPM[2];
  string sTime[8];
  
  iHour = atoi(left(sData, 2));
  iMinute = atoi(right(sData, 2));
	
  //Regular or Army?
  if (Time_Format)
  { //Army
   sHour = ItoLA(iHour);
   sAMPM = "";
  }
  else
  { //Regular
    //Set Hour
    sHour = ItoA(iHour mod 12);
    if (iHour = 0 || iHour = 12)
      sHour = "12";
      
    // Set AM/PM
	  if (iHour < 12)
    {
      sAMPM = "AM";
     }
    else
    {
      sAMPM = "PM";
    }	
  }
  
  //Set Minute
  sMinute = ItoLA(iMinute); 
  	      
	sTime = sHour + ":" + sMinute + " " + sAMPM;
    
  return (sTime);
}

Integer_Function RoomIndex(string RoomID)
{
	integer i, iIndex;
	
	if (Debug)
	 trace ("** RoomIndex **\n");
	
	iIndex = 0;
	
  for (i = 1 to g_iRoomListCount)
  {
    if (RoomID = RoomList[i].RoomID)
    {
      iIndex = i;
      break;
    }
  }
  
  if (Debug)
   trace ("  Index:%u\n", iIndex);
  
	return (iIndex);	
}

String_Function FormatFreeUntil(string sData)
{
	string sFreeUntil[40],
				 sFreeUntilDate[10],
				 sFreeUntilTime[8],
				 sDateToday[10];
	
	string sHour[2],
				 sMinute[2];
 	
	if (Debug)
	{
		trace ("** FormatFreeUntil **\n");
		trace ("  Data:%s\n", sData);
	}
	
	// ** Format date.
	
	// Get today's date.
	sDateToday = date(1);
	
	// Substitute "-" for "/"
	sDateToday = left(sDateToday, 2) + "-" + mid(sDateToday, 4, 2) + "-" + right(sDateToday, 4);
	
	// Get free until date
	sFreeUntilDate = left(sData, 10);
	
	// Re-format to MM-DD-YYYY.
	sFreeUntilDate = mid(sFreeUntilDate, 6, 2) + "-" + right(sFreeUntilDate, 2) + "-" + left(sFreeUntilDate, 4);
	
	// Is free until date today?
	if (sFreeUntilDate = sDateToday)
	{
		// Yes, date is today. Clear var.
		
		sFreeUntilDate = "";
	}
	
	// ** Format time.
	
	// Get hour.		
	sHour = mid(sData, 12, 2);
		
	// Get minute.		
	sMinute = mid(sData, 15, 2);
	
	// Build time string.
	sFreeUntilTime = sHour + ":" + sMinute;
  sFreeUntilTime = FormatTime(sFreeUntilTime);	
		
	// Build output string.		
  
  // Show the date?
  if (len(sFreeUntilDate) > 0)
  {
		// Yes, show date.
		
		sFreeUntil = " - Free All Day";  	
  }
  else
  {
  	// Only show time.
  	
  	sFreeUntil = " - Free Until " + sFreeUntilTime;
  }
	
	if (Debug)
	{
		trace ("  FreeUntil:%s\n", sFreeUntil);
	}
	
	return (sFreeUntil); 		
}

Function SendAvailableRoomsList()
{
  integer i;

	if (Debug)
	 trace ("** SendList **\n");
  
  Sending_Available_Rooms_List_FB = TRUE;
  
  To_Module_DataScroller_Data$ = "<Data>";
  
  To_Module_DataScroller_Data$ = "<Type>List</Type>";
  
  for (i = 1 to g_iAvailableRoomsCount)
  {
		To_Module_DataScroller_Data$ = "<Item>";

    To_Module_DataScroller_Data$ = "<FieldText>";
    
    To_Module_DataScroller_Data$ = AvailableList[i].RoomName + "\r" +
     FormatFreeUntil(AvailableList[i].FreeUntil);
  
    To_Module_DataScroller_Data$ = "</FieldText>";	    

    To_Module_DataScroller_Data$ = "<FieldData1>" + AvailableList[i].RoomID + "</FieldData1>";
    
    To_Module_DataScroller_Data$ = "<FieldData2>" + AvailableList[i].FreeUntil + "</FieldData2>";
    
    To_Module_DataScroller_Data$ = "<FieldData3></FieldData3>";
    
    To_Module_DataScroller_Data$ = "<FieldData4></FieldData4>";
      	  
	  To_Module_DataScroller_Data$ = "</Item>";
  }
  
  To_Module_DataScroller_Data$ = "</Data>";
  
  Sending_Available_Rooms_List_FB = FALSE;
}




Integer_Function ValidFreeUntilData(string sData)
{
	integer i,
					bValidData,
					iDashCount,
					iColonCount,
					iTCount,
					iLen;
	
  integer iCurrHour,
          iCurrMin,
          iCurrMinutes,
          iHour,
          iMin,
          iMinutes;
  				
	string sChar[1],
         sCurrDate[10],
         sDate[10];
	
	if (Debug)
	{
		trace ("\n** ValidFreeUntilData **\n");
		trace ("  sData:%s\n", sData);
	}
	
	iLen = len(sData);
	bValidData = FALSE;	
	iDashCount = 0;
	iColonCount = 0;
	iTCount = 0;
	
	for (i = 1 to iLen)
	{
		sChar = mid(sData, i, 1);
		
		if (sChar = "-")
		 iDashCount = iDashCount + 1;
		else if (sChar = ":")
		 iColonCount = iColonCount + 1;
		else if (sChar = "T")
		 iTCount = iTCount + 1;		
	}
	
	// Valid data?
	if (iDashCount = 2 && iColonCount = 2 && iTCount = 1)
	{

	  if (Debug)
	   trace ("  Valid data format.\n");
      
    // Now that it is valid. Check date/time.
    
    sDate = left(sData, 10);
    sCurrDate = left(date(3), 4) + "-" + mid(date(3), 6, 2) + "-" + mid(date(3), 9, 2);
    
    // Date = today?
    if (sDate = sCurrDate)
    {
      // Yes, date = today. Need to check time.
      
      if (Debug)
	     trace ("  Date = today. Need to check time.\n");
      
      iCurrHour = gethournum();
      iCurrMin = getminutesnum();
      
      iHour = atoi(mid(sData, 12, 2));
      iMin = atoi(mid(sData, 15, 2));
      
      iCurrMinutes = (iCurrHour * 60) + iCurrMin;
      iMinutes = (iHour * 60) + iMin;
      
      if (Debug)
      {
	      trace ("  iCurrMinutes:%u.\n", iCurrMinutes);
        trace ("  iMinutes:%u.\n", iMinutes);
      }
      
      // Time > now.
      if (iMinutes > iCurrMinutes)
      {
        // Time >= 10 min
        if (iMinutes - iCurrMinutes >= 10)
         bValidData = TRUE;
      }
    }
    else
    {
      if (Debug)
	     trace ("  Date != today. Data is valid.\n");
       
      bValidData = TRUE;    
    }
    
	}
	
	if (Debug)
	{
		trace ("  bValidData:%u\n", bValidData);
	}
	
	return (bValidData);
}

Function ProcessAttributeData()
{
  string sRemoved[255],
  			 sRoomID[50],
  			 sFreeUntil[20];
  
  integer i,
  				iNode,
  				iAttributeType,
  				iRoomCount,
  				iRoomIndex;
  				
  integer bValidFreeUntilData,
  				bRoomOnline;
  
	if (Debug)
	{
		trace ("** ProcessAttributeData **\n");
		trace ("Data Size:%u\n", len(g_sData1));
  }
  
  Request_Active_FB = FALSE;
  Processing_Data_FB = TRUE;
  
  iNode = NODE_ROOT;
  iRoomCount = 0;
  
  sFreeUntil = "";
    
  do
  {
  	sRemoved = remove(">", g_sData1);
  	
  	
  	if (iNode = NODE_ROOT)
  	{
  		if (find("<Room>", sRemoved))
  		{
  			iNode = NODE_ROOM;
  			
  			bValidFreeUntilData = FALSE;
  			
  			sRoomID = "";
  			sFreeUntil = "";
  			iRoomIndex = 0;
  			bRoomOnline = FALSE;  		
  		}
  	}
  	else if (iNode = NODE_ROOM)
  	{  		
  		if (find("</Room>", sRemoved))
  		{
  			iNode = NODE_ROOT;

    		if (Debug)
    		{
    			trace ("  End Room Data:\n");
    			trace ("   iRoomIndex:%u\n", iRoomIndex);
    			trace ("   bRoomOnline:%u\n", bRoomOnline);
    			trace ("   sFreeUntil:%s\n", sFreeUntil);
    			trace ("   bValidFreeUntilData:%u\n", bValidFreeUntilData);
    		}
    	      	  			
  			// Have valid FreeUntilData && RoomOnline && Have the Index?
  			if (bValidFreeUntilData && bRoomOnline && iRoomIndex > 0)
  			{
  				
  				if (Debug)
  				{
  					trace ("  Valid FreeUntil, Room Online & RoomIndex > 0.\n");
  				}
  					
  				if (iRoomCount < MAX_ROOMS)
  				{
  					iRoomCount = iRoomCount + 1;
  						
  					AvailableList[iRoomCount].RoomID = sRoomID;
  					AvailableList[iRoomCount].RoomName = RoomList[iRoomIndex].RoomName; 
  						
  					AvailableList[iRoomCount].FreeUntil = sFreeUntil;  					
  				}
  				
  			}
  			
  		}
  		else
  		{
				if (find("</RoomID>", sRemoved))
  			{
  				sRoomID = left(sRemoved, len(sRemoved) - 9);
  		
  				iRoomIndex = RoomIndex(sRoomID);  			
  			}
  			else if (find("<Attribute>", sRemoved))
  			{
  				iAttributeType = 0;		
  			}
  			else if (find("</Join>", sRemoved))
  			{
  				// Have the attribute join.
  				
  				sRemoved = left(sRemoved, len(sRemoved) - 7);
  				
  				if (sRemoved = "a0" || sRemoved = "A0")
  				{
  					iAttributeType = ATTRIBUTE_ONLINE_STATUS;
  				}
  				
  				// Do not have valid free until data yet from any name.
  				if (!bValidFreeUntilData && g_iFreeUntilJoinCount > 0)
  				{
  					if (Debug)
  					{
  						trace ("  Using joins & do not have valid free until data yet.\n");
  					}
  					
  					for (i = 1 to g_iFreeUntilJoinCount)
  					{
  						if (Debug)
  						{
  							trace ("  g_sFreeUntilAttributeJoin: %s.\n", g_sFreeUntilAttributeJoin[i]);
  						}
  						
  						if (g_sFreeUntilAttributeJoin[i] = sRemoved || upper(g_sFreeUntilAttributeJoin[i]) = sRemoved)
  						{
  							// Found a valid free until join.

  							if (Debug)
  							{
  								trace ("  Found free until join match.\n");
  							}
  					  							
  							iAttributeType = ATTRIBUTE_FREE_UNTIL;
  							
  							break;
  						} 
  					}
  				}
  			}
  			else if (find("</Name>", sRemoved))
  			{
  				sRemoved = left(sRemoved, len(sRemoved) - 7);
  				
  				if (Debug)
  				{
  					trace ("  Found Name: %s.\n", sRemoved);
  				}  				
  				
  				// Do not have valid free until data yet from any name.
  				if (!bValidFreeUntilData && g_iFreeUntilNameCount > 0)
  				{
  					if (Debug)
  					{
  						trace ("  Using names & do not have valid free until data yet.\n");
  					}
  					
  					for (i = 1 to g_iFreeUntilNameCount)
  					{
  						if (Debug)
  						{
  							trace ("  g_sFreeUntilAttributeName: %s.\n", g_sFreeUntilAttributeName[i]);
  						}
  						
  						if (g_sFreeUntilAttributeName[i] = sRemoved)
  						{
  							// Found a valid free until name.

  							if (Debug)
  							{
  								trace ("  Found free until name match.\n");
  							}
  					  							
  							iAttributeType = ATTRIBUTE_FREE_UNTIL;
  							
  							break;
  						} 
  					}
  				}	  				
  			}
  			else if (find("</Value>", sRemoved))
  			{
  				// Drop the end tag
  				sRemoved = left(sRemoved, len(sRemoved) - 8);

  				if (Debug)
  				{
  					trace ("  Found Value\n");
  					trace ("    sValue: %s\n", sRemoved);
  					trace ("    iAttributeType: %u\n", iAttributeType);
  				}
  							  				
  				cswitch (iAttributeType)
  				{
  					case (ATTRIBUTE_ONLINE_STATUS):
  					{
  						if (sRemoved = "0")
  						{
  							bRoomOnline = FALSE;
  						}
  						else if (sRemoved = "1")
  						{
  							bRoomOnline = TRUE;
  						}
  						else if (sRemoved = "2")
  						{
  							bRoomOnline = TRUE;
  						}
  						
  						break;
  					}	
  					
  					case (ATTRIBUTE_FREE_UNTIL):
  					{
  						// Have data?
  						if (len(sRemoved) > 0)
  						{  							
  							sFreeUntil = sRemoved;
  							
  							bValidFreeUntilData = ValidFreeUntilData(sFreeUntil);
  						}
  						
  						break;
  					}
  				}
  			}
  			else if (find("</Error>", sRemoved))
  			{
  			}
  		}
  		
  	}
      	
  } until (len(g_sData1) = 0);
  
  g_iAvailableRoomsCount = iRoomCount;
  Available_Rooms_Count = iRoomCount;
  
	//Post-processs if needed
	if (iRoomCount > 0)
	{		
		call SendAvailableRoomsList();
	}
	else
	{
		No_Available_Rooms_Found = TRUE;
		No_Available_Rooms_Found = FALSE;
	}
	
	Processing_Data_FB = FALSE;
}

Function QueryAttributes()
{
  integer i, j;

	if (Debug)
	 trace ("** QueryAttributes **\n");
  
  g_sAttributeStatusRequestID = "AvailRooms" + itoa(gethseconds());
  
  //Send the query out
  To_RV_RoomAttributeQuery$ = "<RequestRoomAttributeList>" +
     "<RequestID>" + g_sAttributeStatusRequestID + "</RequestID>";
  
  //Add each room
  for (i = 1 to g_iRoomListCount)
  {

    To_RV_RoomAttributeQuery$ =
    	"<Room>" +
     		"<RoomID>" + RoomList[i].RoomID + "</RoomID>" + 
     		"<Read>" +
     			"<Attributes>" +
     				"<Attribute><Join>a0</Join></Attribute>";
     			  
    // Query by name (process will be by name also)
    if (g_iFreeUntilJoinCount = 0)
    {
    	if (g_iFreeUntilNameCount = 1)
    	{
     			To_RV_RoomAttributeQuery$ =
     			  "<Attribute><Name>" + g_sFreeUntilAttributeName[1] + "</Name></Attribute>";     			  
    	}
    	else
    	{
				for (j = 1 to g_iFreeUntilNameCount)
				{					
					To_RV_RoomAttributeQuery$ =
     				"<Attribute><Name>" + g_sFreeUntilAttributeName[j] + "</Name></Attribute>";     			  	     			  	
     		}    
    	}
    }
    else
    {
    	// Query by join (process will still be by name)
    	// Need this for Microsoft build since query by name is not supported.
    	
    	if (g_iFreeUntilJoinCount = 1)
    	{
     			To_RV_RoomAttributeQuery$ =
     			  "<Attribute><Join>" + g_sFreeUntilAttributeJoin[1] + "</Join></Attribute>";     			  
    	}
    	else
    	{
				for (j = 1 to g_iFreeUntilJoinCount)
				{					
					To_RV_RoomAttributeQuery$ =
     				"<Attribute><Join>" + g_sFreeUntilAttributeJoin[j] + "</Join></Attribute>";     			  	     			  	
     		}    
    	}    	
    }
     	
    To_RV_RoomAttributeQuery$ =		  
     			"</Attributes>" +
     		"</Read>" +
    	"</Room>";
  }
  
  //Add the end tag
  To_RV_RoomAttributeQuery$ = "</RequestRoomAttributeList>";
  
}



Function ProcessRoomList()
{
	string sRemoved[255],
				 sID[50],
				 sName[50];
				 
	integer iCount;
	
	if (Debug)
	 trace ("** ProcessRoomList **\n");
	
	iCount = 0;
	
	do
	{
		sRemoved = remove(">", g_sData2);
		
		if (find("<Room>", sRemoved))
		{
			sID = "";
			sName = "";		
		}
		else if (find("</ID>", sRemoved))
		{
			sID = left(sRemoved, len(sRemoved) - 5);
		}
		else if (find("</Name>", sRemoved))
		{
			sName = left(sRemoved, len(sRemoved) - 7);
		}
		else if (find("</Room>", sRemoved))
		{
			if (iCount < MAX_ROOMS)
			{
				iCount = iCount + 1;
				
				RoomList[iCount].RoomID = sID;
				RoomList[iCount].RoomName = sName;
				
				if (Debug)
				{
					trace ("Stored:%u\n", iCount);
					trace (" RoomID:%s\n", sID);
					trace (" sName:%s\n", sName);
				} 
			}
		}
		
	} until (len(g_sData2) = 0);
	
	g_iRoomListCount = iCount;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/ 

RELEASE RoomView_Online
{
  g_sAttributeStatusRequestID = "";
  
  Request_Active_FB = FALSE;
}

CHANGE FreeUntilAttributeNames$
{
	integer iIndex;
	
	iIndex = 0;
	
	if (len(FreeUntilAttributeNames$) > 0)
	{
		if (find(",", FreeUntilAttributeNames$))
		{
			// More than one name. Separate into list.
			
			do
			{
				iIndex = iIndex + 1;
				
				if (find(",", FreeUntilAttributeNames$))
				{
					g_sFreeUntilAttributeName[iIndex] = remove(",", FreeUntilAttributeNames$);
					g_sFreeUntilAttributeName[iIndex] = left(g_sFreeUntilAttributeName[iIndex], len(g_sFreeUntilAttributeName[iIndex]) - 1);		
				}
				else
				{
					g_sFreeUntilAttributeName[iIndex] = removebylength(len(FreeUntilAttributeNames$), FreeUntilAttributeNames$);
				}
			
			} until (len(FreeUntilAttributeNames$) = 0);
			
			g_iFreeUntilNameCount = iIndex;
		}
		else
		{
			// Only one name.
			g_iFreeUntilNameCount = 1;
			
			g_sFreeUntilAttributeName[1] = FreeUntilAttributeNames$;
		}
	} 
}

CHANGE FreeUntilAttributeJoins$
{
	integer iIndex;
	
	iIndex = 0;
	
	if (len(FreeUntilAttributeJoins$) > 0)
	{
		if (find(",", FreeUntilAttributeJoins$))
		{
			// More than one name. Separate into list.
			
			do
			{
				iIndex = iIndex + 1;
				
				if (find(",", FreeUntilAttributeJoins$))
				{
					g_sFreeUntilAttributeJoin[iIndex] = remove(",", FreeUntilAttributeJoins$);
					g_sFreeUntilAttributeJoin[iIndex] = left(g_sFreeUntilAttributeJoin[iIndex], len(g_sFreeUntilAttributeJoin[iIndex]) - 1);		
				}
				else
				{
					g_sFreeUntilAttributeJoin[iIndex] = removebylength(len(FreeUntilAttributeJoins$), FreeUntilAttributeJoins$);
				}
			
			} until (len(FreeUntilAttributeJoins$) = 0);
			
			g_iFreeUntilJoinCount = iIndex;
		}
		else
		{
			// Only one name.
			g_iFreeUntilJoinCount = 1;
			
			g_sFreeUntilAttributeJoin[1] = FreeUntilAttributeJoins$;
		}
	} 
}
  
PUSH Get_Available_Rooms
{
  if (!Request_Active_FB && !Processing_Data_FB)
  {
  	if (g_iRoomListCount > 0)
  	{
  		Request_Active_FB = TRUE;
  	
  		call QueryAttributes();	
		}
		else
		{
			No_Available_Rooms_Found = TRUE;
			No_Available_Rooms_Found = FALSE;
		}
	}
}

PUSH Get_Available_Rooms_Timeout
{
  g_sAttributeStatusRequestID = "";
  
  Request_Active_FB = FALSE;
}

CHANGE From_RV_RoomAttributeResponse$
{
  
  if (g_bRXOK1)
  {
    g_bRXOK1 = FALSE;
    
    while (1)
    {
    	g_sData1 = gather("</RoomAttributeListResponse>", From_RV_RoomAttributeResponse$);
    	
    	if (find(g_sAttributeStatusRequestID, g_sData1))
    	{        
        call ProcessAttributeData();    	
    	} 
    }
  }
}

CHANGE From_Module_Room_List_Data$
{
  
  if (g_bRXOK2)
  {
    g_bRXOK2 = FALSE;
    
    while (1)
    {
    	g_sData2 = gather("</RoomList>", From_Module_Room_List_Data$);
    	
    	call ProcessRoomList();    	
    }   
  }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
  integer i;
  
  WaitForInitializationComplete();
  
  g_bRXOK1 = TRUE;
  g_bRXOK2 = TRUE;
  
  g_sData1 = "";
  g_sData2 = "";
  
	Request_Active_FB = FALSE;
	Processing_Data_FB = FALSE;
	Sending_Available_Rooms_List_FB = FALSE;
  
  g_iFreeUntilNameCount = 0;
  
  for (i = 1 to MAX_FREE_UNTIL_NAMES)
  {
  	g_sFreeUntilAttributeName[i] = "";
  }
  
  g_iFreeUntilJoinCount = 0;
  
  for (i = 1 to MAX_FREE_UNTIL_JOINS)
  {
  	g_sFreeUntilAttributeJoin[i] = "";
  }
}


