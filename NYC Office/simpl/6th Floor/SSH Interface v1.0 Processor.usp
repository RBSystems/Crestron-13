/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics, Inc.
System Name: Cisco SSH Interface
System Number:
Programmer: LP
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "SSH Interface v1.0 Processor"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
#HELP_BEGIN
To be used with the SSH Interface v1.0.umc module only.
Not to be used as a stand alone module.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
// #INCLUDEPATH ""
#USER_SIMPLSHARP_LIBRARY "SSH_Interface_v1_0"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Connect;
DIGITAL_INPUT Accept_New_Key;
DIGITAL_INPUT Decline_New_Key;
DIGITAL_INPUT Retry;
BUFFER_INPUT To_Device[150];
// BUFFER_INPUT 

DIGITAL_OUTPUT Is_Connected;
DIGITAL_OUTPUT Reconnect;
DIGITAL_OUTPUT Accept_New_Key_Notice;
ANALOG_OUTPUT Connection_Status;
STRING_OUTPUT New_Key_Text;
STRING_OUTPUT Connection_Status_Text;
STRING_OUTPUT From_Device;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, IP_Address[15];
INTEGER_PARAMETER IP_Port;
STRING_PARAMETER Username[20];
STRING_PARAMETER Password[20];
INTEGER_PARAMETER Accept_Any_Key;
INTEGER_PARAMETER Unique_ID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

SSH_Interface UserClass;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iConnectRequest;
STRING	sStringToSend[250];	
  
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function RegDelegates()
{
	RegisterDelegate(UserClass, SendDelay, ProcessDelay);
	RegisterDelegate(UserClass, SendFromDevice, ProcessFromDevice);
	RegisterDelegate(UserClass, SendConnectionStatus, ProcessConnectionStatus);
	RegisterDelegate(UserClass, SendFingerprint, ProcessFingerprint);
}

Callback Function ProcessDelay(INTEGER DelayTime)
{
	delay(DelayTime);
}

Callback Function ProcessFromDevice(STRING ReturnFromDevice)
{
	From_Device = ReturnFromDevice;
}

Callback Function ProcessFingerprint(STRING Fingerprint)
{
	New_Key_Text = Fingerprint;
}

Callback Function ProcessConnectionStatus(STRING ConnectedValue)
{
	if(ConnectedValue = "True")
	{

		if(Connection_Status <> 2)
		{
			Connection_Status = 2;
			Connection_Status_Text = "Connected";    
		}
		Is_Connected = 1;	
	Reconnect = 0;
    }
	else if(ConnectedValue = "False")
	{
		if(Connection_Status <> 3)
		{
			Connection_Status = 3;
			Connection_Status_Text = "Not Connected";    
		}
		Is_Connected = 0;
		if(iConnectRequest = 1)
		{
		    Reconnect = 1;
		}
	}
	else if(ConnectedValue = "Non-Matching Fingerprint")
	{
		Accept_New_Key_Notice = 1;
		iConnectRequest = 0;
		Reconnect = 0;
	}
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/


RELEASE Connect
{

	iConnectRequest = 0;  
    UserClass.Disconnect();  
	Accept_New_Key_Notice = 0;
}

PUSH Connect
{
	Connection_Status = 1;
	Connection_Status_Text = "Trying To Connect";    
	iConnectRequest = 1;
	if(Accept_Any_Key)
		UserClass.ClearKey();
   	UserClass.Connect(IP_Address, IP_Port, Username, Password);
}

PUSH Accept_New_Key
{
	Connection_Status = 1;
	Connection_Status_Text = "Trying To Connect";    
	iConnectRequest = 1;
	UserClass.Accept_New_Key();
	Accept_New_Key_Notice = 0;
   	UserClass.Connect(IP_Address, IP_Port, Username, Password);
}

PUSH Decline_New_Key
{
	UserClass.Decline_New_Key();
	Accept_New_Key_Notice = 0;
}

PUSH Retry
{
	Connection_Status = 1;
	Connection_Status_Text = "Trying To Connect";    
    UserClass.Connect(IP_Address, IP_Port, Username, Password);
}

THREADSAFE CHANGE To_Device
{
	while(1)
	{
		sStringToSend = To_Device;
		clearbuffer(To_Device);
		delay(1);
		if(len(sStringToSend))
		{
   			UserClass.Command_In(sStringToSend);
			clearbuffer(sStringToSend);
		}  
			
	}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	waitforinitializationcomplete();
	RegDelegates();
	UserClass.Unique_ID(Unique_ID);
	Connection_Status = 3;
	Connection_Status_Text = "Not Connected";    
	iConnectRequest = 0;  
	Reconnect = 0;
	Is_Connected = 0;
	UserClass.LoadSettings();
	Accept_New_Key_Notice = 0;
}


