/*
Brian J. Magrogan
Cisco Multiway Call Feedback
*/

#Symbol_Name "Cisco Multiway Call Feedback Helper v1"
#Category "10" // Serial
#Default_Volatile
#Enable_Stack_Checking

#Define_Constant			csSearchString						"*s Conference Multipoint Mode: \x22"
#Define_Constant			csMultiwayPollString				"xStatus Conference Multipoint Mode\n"
#Define_Constant			csMultiwayPollEndString				"** end"
#Define_Constant			csMultisiteSearchString				"MultiSite"
#Define_Constant			csMultiwaySearchString				"MultiWay"
#Define_Constant			csOffSearchString					"Off"

#Define_Constant			ciCallSlots							3
#Define_Constant			ciBufferInputSize					5000

#Help_Begin
Aides in feedback processing for the Multiway Call Feedback module
#Help_End

/*** I/O ***/

Digital_Input	_skip_, Poll_b, _skip_, Call_Connected_Held[ciCallSlots];
Buffer_Input	_skip_, _skip_, Cisco_rx$[ciBufferInputSize];

Digital_Output	_skip_, Poll_Busy_fb, _skip_, Multisite_Call_Connected_fb, Multiway_Call_Connected_fb, Single_Call_Connected_fb, No_Call_Connected_fb;
String_Output	_skip_, Cisco_tx$;


/*** Parameters ***/        

Integer_Parameter	DebugMode; 

#Begin_Parameter_Properties DebugMode
	propValidUnits = unitDecimal;
	propDefaultValue= 0d;
	propList={ 0d,"Debug Mode Off" },{ 1d,"Debug Mode On" };
#End_Parameter_Properties


/*** Structures ***/


/*** Variables ***/

Integer	g_nSemaphore, g_nStartPOS, g_nEndPOS, g_nDebug, g_nCallConnected;

String	g_sCurrentMultipointMode$[20], g_sTemp$[255], g_sGarbage$[500];


/*** Functions ***/

Function UpdateOutputs(string sCurrent_Mode$)
{
	if(g_nCallConnected)
	{
     	if(find(upper(csMultisiteSearchString), upper(sCurrent_Mode$)))
		{
        	No_Call_Connected_fb = 0;
			Multiway_Call_Connected_fb = 0;
			Single_Call_Connected_fb = 0;
			Multisite_Call_Connected_fb = 1; 	
		}
		else if(find(upper(csMultiwaySearchString), upper(sCurrent_Mode$)))
		{
        	No_Call_Connected_fb = 0;
			Multisite_Call_Connected_fb = 0;
			Single_Call_Connected_fb = 0; 	
			Multiway_Call_Connected_fb = 1;
		}
		else if(find(upper(csOffSearchString), upper(sCurrent_Mode$)))
		{
        	No_Call_Connected_fb = 0;
			Multisite_Call_Connected_fb = 0;
			Multiway_Call_Connected_fb = 0;
			Single_Call_Connected_fb = 1; 	
		}
	}
	else
	{
     	Multisite_Call_Connected_fb = 0;
		Multiway_Call_Connected_fb = 0;
		Single_Call_Connected_fb = 0;
		No_Call_Connected_fb = 1;
	}			 	
}


/*** Events ***/

Push Poll_b
{
 	if(!Poll_Busy_fb && g_nCallConnected)
	{
		Poll_Busy_fb = 1;
		makestring(Cisco_tx$, "%s", csMultiwayPollString);
	}
}

Push Call_Connected_Held
{
	g_nCallConnected = 1;
}

Release Call_Connected_Held
{
	integer nLastCall, nTempCallStatus, i;

	nTempCallStatus = 0;

	for(i = 1 to ciCallSlots)
	{
		if(Call_Connected_Held[i])
		{
			nTempCallStatus = 1;
		}
	}

	g_nCallConnected = nTempCallStatus;

	if(!g_nCallConnected)
	{
      	Multisite_Call_Connected_fb = 0;
		Multiway_Call_Connected_fb = 0;
		Single_Call_Connected_fb = 0;
		No_Call_Connected_fb = 1;
	} 	
}

Change Cisco_rx$ 
{	
	if(!g_nSemaphore && Poll_Busy_fb)
	{
		g_nSemaphore = 1;
		while (find("\x0D\x0A", Cisco_rx$))
		{		
			g_sTemp$ = remove("\x0D\x0A", Cisco_rx$);
			
			if(find(csSearchString, g_sTemp$))	//Multimode Section Found
			{
				if(g_nDebug) print ("Multimode Section Found\n");
				g_nStartPOS = find(csSearchString, g_sTemp$) + Len(csSearchString);
				g_nEndPOS = find("\x22", g_sTemp$, g_nStartPOS);
				makestring(g_sCurrentMultipointMode$, "%s", mid(g_sTemp$, g_nStartPOS, (g_nEndPOS - g_nStartPOS)));
				UpdateOutputs(g_sCurrentMultipointMode$);
			}			
			else if(find(csMultiwayPollEndString, g_sTemp$))	//End of Section Found
			{
				if(g_nDebug) print ("End of Section Found\n");
				clearbuffer(Cisco_rx$);
				Poll_Busy_fb = 0;
			}
			else
			{
				g_sGarbage$ = remove("\x0D\x0A", Cisco_rx$);
			}
		}
		g_nSemaphore = 0;
	}
	else
	{
		clearbuffer(Cisco_rx$);
	}			
}


/*** Main ***/

Function Main()
{
	makestring(g_sTemp$, "");
	makestring(g_sGarbage$, "");
	makestring(g_sCurrentMultipointMode$, "");
	g_nStartPOS = 0;
	g_nEndPOS = 0;
	g_nSemaphore = 0;
	g_nCallConnected = 0;
	g_nDebug = DebugMode;
}


