/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
//#SYMBOL_NAME

/*** VERSION HISTORY
   
  v1
  ====
   -initial release
   
  v1d
  ====
   -changed buffer processing to "while(1)" "gather"
   
****/   
   
   
// #HINT ""
#DEFINE_CONSTANT TRUE   1
#DEFINE_CONSTANT FALSE  0

#DEFINE_CONSTANT DATA_BUFF_SIZE	65000

#DEFINE_CONSTANT MAX_ITEMS	400

#DEFINE_CONSTANT MAX_ID_LEN		50
#DEFINE_CONSTANT MAX_NAME_LEN	75

// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT Debug,
							Enable_Auto_Sort_Data,
							Require_Location_Filter,
							Require_Name_Filter,
              RoomView_Online,
              Get_List_Using_Location,
              Get_List_Using_Name,
              Data_Timeout;
 
// ANALOG_INPUT
 
STRING_INPUT Local_RoomID$[50],
             Location_Filter$[100],
             Name_Filter$[100];
 
BUFFER_INPUT From_RV_RoomListReponse$[DATA_BUFF_SIZE]; 

DIGITAL_OUTPUT Module_Busy_FB,
							 Request_Active_FB,
               Processing_Data_FB,
               Sorting_List_FB,
               Location_Filter_Missing,
               Name_Filter_Missing,
               No_Rooms_In_List;
                
ANALOG_OUTPUT Room_List_Qty;

 
STRING_OUTPUT To_RV_RoomListQuery$,
              To_Module_Avaialble_Rooms_List_Data$; 


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE Data
{
  string RoomID[MAX_ID_LEN];
  string RoomName[MAX_NAME_LEN];
};

Data Item[MAX_ITEMS];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK;

INTEGER g_iTotalItems;

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER

STRING g_sRequestID[40];

STRING g_sData[DATA_BUFF_SIZE];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function SortData()
{
  integer j, bSwappedOnPrev;
  
  string sTempData1[MAX_NAME_LEN],
         sTempData2[MAX_ID_LEN];

  if (Debug)
   print ("**SortData**\n");
  
  Sorting_List_FB = TRUE;
      
  bSwappedOnPrev = TRUE;
  
  while (bSwappedOnPrev)
  {
    bSwappedOnPrev = FALSE;
    for (j = 1 to g_iTotalItems - 1)
    {
          
      if (upper(Item[j].RoomName) > upper(Item[j + 1].RoomName))
      {
        bSwappedOnPrev = TRUE;
        
        //assign to temp var
        sTempData1 = Item[j].RoomName;
        sTempData2 = Item[j].RoomID;
        
        //swap the values
        Item[j].RoomName = Item[j + 1].RoomName;
        Item[j].RoomID = Item[j + 1].RoomID;           
            
        Item[j + 1].RoomName = sTempData1;
        Item[j + 1].RoomID = sTempData2;
      }
    }
  }
  
  if (Debug)
  {
  	print ("   Sorted List:\n");
  	
  	for (j = 1 to g_iTotalItems)
  	{
  		print ("    Index:%u\n", j); 
  		print ("     %s\n", Item[j].RoomID);
  		print ("     %s\n", Item[j].RoomName);
  	}
  }
  
  Sorting_List_FB = FALSE;
}


Function SendList()
{
	integer i;
	
	if (Debug)
	 print ("** SendList **\n");
	
	To_Module_Avaialble_Rooms_List_Data$ = "<RoomList>";
	 
	for (i = 1 to g_iTotalItems)
	{
  	To_Module_Avaialble_Rooms_List_Data$ = 
      "<Room>" +
      	"<ID>" + Item[i].RoomID + "</ID>" +
      	"<Name>" + Item[i].RoomName + "</Name>" +
      "</Room>";	
	}
	
	To_Module_Avaialble_Rooms_List_Data$ = "</RoomList>";
}


Function ProcessData()
{
  string sRemoved[255],
  			 sRoomID[MAX_ID_LEN],
  			 sRoomName[MAX_NAME_LEN];
  			 
  integer i, iIndex;
  
  if (Debug)
   print ("** Process Data **\n");
  
  Request_Active_FB = FALSE;
  Processing_Data_FB = TRUE;
  
  sRemoved = "";
  sRoomID = "";
  sRoomName = "";
  
  iIndex = 0;
  
  do
  {
  	sRemoved = remove(">", g_sData);
  	
  	if (Debug)
   	 print ("Data:%s\n", sRemoved);
   
  	if (find("<Room>", sRemoved))
  	{
  		sRoomID = "";
  		sRoomName = "";
  	}
  	else if (find("</RoomID>", sRemoved))
  	{
    	sRoomID = left(sRemoved, len(sRemoved) - 9);
    
    	if (Debug)
     	 print ("RoomID:%s\n", sRoomID);     
  	}
  	else if (find("</RoomName>", sRemoved))
  	{
    	sRoomName = left(sRemoved, len(sRemoved) - 11);
    
    	if (Debug)
     	 print ("RoomName:%s\n", sRoomName);
  	}
  	else if (find("</Room>", sRemoved))
  	{
      if (sRoomID <> Local_RoomID$)
      {
      	if (g_iTotalItems < MAX_ITEMS)
      	{
      		iIndex = iIndex + 1;
      	
      		Item[iIndex].RoomID = sRoomID;
      		Item[iIndex].RoomName = sRoomName;
      		
      		if (Debug)
      		{
      			print ("Stored:%u\n", iIndex);
      			print (" RoomID:%s\n", sRoomID);
      			print (" RoomName:%s\n", sRoomName);
      		}
    		}
    	}    
  	}
  	
  } until (len(g_sData) = 0);
	
  Processing_Data_FB = FALSE;
          
  Room_List_Qty = iIndex;
  g_iTotalItems = iIndex;
  
  if (g_iTotalItems = 0)
  {
  	No_Rooms_In_List = TRUE;
  	No_Rooms_In_List = FALSE;
  	
  	//Send an empty list
  	To_Module_Avaialble_Rooms_List_Data$ = "<RoomList></RoomList>"; 
  }
  else
  {
	
		//Need to sort?
		if (Enable_Auto_Sort_Data)
		{
			//More than 1 item?
			if (g_iTotalItems > 1)
			{
				//Yes, so sort the list
				
				call SortData();
			}
			
			call SendList();
		}
		else
		{
			//Do not need to sort
			
			call SendList();
		}  
  }
  
  Module_Busy_FB = FALSE;  
}                               

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

RELEASE RoomView_Online
{
  g_sRequestID = "";
  
  Module_Busy_FB = FALSE;
  
  Request_Active_FB = FALSE;
  Processing_Data_FB = FALSE;
}

PUSH Data_Timeout
{
  g_sRequestID = "";
  
  Module_Busy_FB = FALSE;
  
  Request_Active_FB = FALSE;
  Processing_Data_FB = FALSE;
}

PUSH Get_List_Using_Location
{
  if (!Request_Active_FB && !Processing_Data_FB)
  {
  	g_sRequestID = "AvailableRooms" + itoa(gethseconds());
  	
  	if (Require_Location_Filter)
  	{
    	if (len(Location_Filter$) > 0)
    	{
    		Module_Busy_FB = TRUE;
    		
    		Request_Active_FB = TRUE;
        
    		To_RV_RoomListQuery$ = "<RequestRoomList>" +
      		"<RequestID>" + g_sRequestID + "</RequestID>" +
      		"<Property>Location</Property>" +
      		"<Value>" + Location_Filter$ + "</Value>" +
      		"</RequestRoomList>";
  		}
  		else
  		{
  			Location_Filter_Missing = TRUE;
  			Location_Filter_Missing = FALSE;
  		}
  	}
  	else
  	{
    	Module_Busy_FB = TRUE;
    	
    	Request_Active_FB = TRUE;
    	
    	To_RV_RoomListQuery$ = "<RequestRoomList>" +
      	"<RequestID>" + g_sRequestID + "</RequestID>" +
      	"<Property>Location</Property>" +
      	"<Value>" + Location_Filter$ + "</Value>" +
      	"</RequestRoomList>";  	
  	} 
  }
}

PUSH Get_List_Using_Name
{
  if (!Request_Active_FB && !Processing_Data_FB)
  {
    g_sRequestID = "AvailableRooms" + itoa(gethseconds());
    
    if (Require_Name_Filter)
    {
    	if (len(Name_Filter$) > 0)
    	{
		    Module_Busy_FB = TRUE;
		    
		    Request_Active_FB = TRUE;
		    
		    To_RV_RoomListQuery$ = "<RequestRoomList>" +
		      "<RequestID>" + g_sRequestID + "</RequestID>" +
		      "<Property>RoomName</Property>" +
		      "<Value>" + Name_Filter$ + "</Value>" +
		      "</RequestRoomList>";    	
    	}
    	else
    	{
    		Name_Filter_Missing = TRUE;
    		Name_Filter_Missing = FALSE;;
    	}
    }
    else
    {
		  Module_Busy_FB = TRUE;
		  
		  Request_Active_FB = TRUE;
		    
		  To_RV_RoomListQuery$ = "<RequestRoomList>" +
		    "<RequestID>" + g_sRequestID + "</RequestID>" +
		    "<Property>RoomName</Property>" +
		    "<Value>" + Name_Filter$ + "</Value>" +
		    "</RequestRoomList>";    
    }
    

  }
}

CHANGE From_RV_RoomListReponse$
{
  
  if (g_bRXOK)
  {
    g_bRXOK = FALSE;
    
    while(1)
    {
    	g_sData = gather("</RoomListResponse>", From_RV_RoomListReponse$);
    	
    	if (find(g_sRequestID, g_sData))
    	{        
        call ProcessData();    		
    	} 
    }
  }
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{

  WaitForInitializationComplete();
  
  g_bRXOK = TRUE;
  
  g_sData = "";
  
  Module_Busy_FB = FALSE;
  
  Request_Active_FB = FALSE;
  Processing_Data_FB = FALSE;

}


