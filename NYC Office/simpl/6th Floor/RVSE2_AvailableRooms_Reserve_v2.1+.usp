/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE   1
#DEFINE_CONSTANT FALSE  0

#DEFINE_CONSTANT MAX_ROOM_ID_LEN          50

#DEFINE_CONSTANT DATA_BUFF_SIZE	1000

#DEFINE_CONSTANT REQUEST_MODE_IDLE				0
#DEFINE_CONSTANT REQUEST_MODE_BUSY				1
#DEFINE_CONSTANT REQUEST_MODE_PROCESSING	2
#DEFINE_CONSTANT REQUEST_MODE_SUCCESS			3
#DEFINE_CONSTANT REQUEST_MODE_FAILURE			4

#DEFINE_CONSTANT MAX_SUBJECT_LEN 				255
#DEFINE_CONSTANT MAX_ORGANIZER_LEN			100

#DEFINE_CONSTANT MAX_MEETING_ID_LEN			112
#DEFINE_CONSTANT SHOW_BTN               0
#DEFINE_CONSTANT HIDE_BTN               1


// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
              RoomView_Online,
              Time_Format_Display,
							Reserve_Room_OK,
              Reserve_Room_Even_End_Time,
              Reserve_Room_Time_Select,
              Reserve_Room_Select_30,
              Reserve_Room_Select_60,
              Reserve_Room_Select_90,
							Reserve_Room_Timeout;
 
ANALOG_INPUT Max_Reserve_Duration;
 
STRING_INPUT Room_ID$[MAX_ROOM_ID_LEN],
						 Free_Until$[20],
						 Reserve_Now_Organizer$[MAX_ORGANIZER_LEN],
						 Reserve_Now_Subject$[MAX_SUBJECT_LEN]; 

BUFFER_INPUT From_Mod_Workday_DataOut$[DATA_BUFF_SIZE]; 

DIGITAL_OUTPUT Set_Start_End_Valid,
               Set_Select_Valid,
							 Set_Start_End_Invalid; 

ANALOG_OUTPUT Module_Request_Mode;
 
STRING_OUTPUT To_RV_CreateMeeting$,
							Reserve_Room_Start$,
							Reserve_Room_End$,
              Reserve_Room_Select_30$, 
              Reserve_Room_Select_60$,
              Reserve_Room_Select_90$;

ANALOG_OUTPUT Reserve_Room_Select_30_Mode,
              Reserve_Room_Select_60_Mode,
              Reserve_Room_Select_90_Mode;


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
STRUCTURE ReserveNowData
{
  integer iStartYear,
          iStartMonth,
          iStartDay,
          iStartHour,
          iStartMin,
          iStartSec;
          
  integer iEndYear,
          iEndMonth,
          iEndDay,
          iEndHour,
          iEndMin,
          iEndSec;
};

ReserveNowData ConfirmEvent,
               Select30Min,
               Select60Min,
               Select90Min;
               
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK;

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

STRING g_sReserveRequestID[45],
			 g_sReserveDTStart[20],
			 g_sReserveDTEnd[20];
			 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Integer_Function DaysInMonth(integer iMonth, integer iYear)
{
  integer iDays;
  
  iDays = 0;
  
  if (Debug)
  {
  	trace ("\n** DaysInMonth **\n");
  	trace ("  Month:%u\n", iMonth);
  	trace ("  Year:%u\n", iYear);
  }
  
  cswitch (iMonth)
  {
    case(1): //january
    {
      iDays = 31;
      break;
    }
    case(2): //february
    {
      if (iYear mod 4 = 0)
      {
        iDays = 29;
        break;
      }
      else
      {
        iDays = 28;
        break;      
      }
    }
    case(3): //march
    {
      iDays = 31;
      break;
    }
    case(4): //april
    {
      iDays = 30;
      break;
    }
    case(5): //may
    {
      iDays = 31;
      break;
    }
    case(6): //june
    {
      iDays = 30;
      break;
    }
    case(7): //july
    {
      iDays = 31;
      break;
    }
    case(8): //august
    {
      iDays = 31;
      break;
    }
    case(9): //september
    {
      iDays = 30;
      break;
    }
    case(10): //october
    {
      iDays = 31;
      break;
    }
    case(11): //november
    {
      iDays = 30;
      break;
    }
    case(12): //december
    {
      iDays = 31;
      break;
    }
  }
  
  if (Debug)
  {
  	trace ("  Days:%u\n", iDays);
  }
  
  return (iDays);  
}

String_Function Time24ToTime12(string sData)
{
	integer iPos,
					iLen,
					iHour,
					iMinute;
					
	string sTime[8],
				 sAMPM[2];
	
	if (Debug)
	{
		trace ("\n** Time24ToTime12 **\n");
		trace ("  Data:%s\n", sData);
	}
	
	iLen = len(sData);
	iPos = find(":", sData);
	
	iHour = atoi(left(sData, iPos - 1));
	iMinute = atoi(mid(sData, iPos + 1, 2));
  
	if (iHour = 0)
	{
		sTime = "12";
		sAMPM = "AM";
	}
	else if (iHour < 10)
	{
		sTime = "0" + itoa(iHour);
		sAMPM = "AM";
	}
	else if (iHour >= 10 && iHour < 12)
	{
		sTime = itoa(iHour);
		sAMPM = "AM";
	}
	else if (iHour = 12)
	{
		sTime = itoa(iHour);
		sAMPM = "PM";
	}
	else
	{
		iHour = iHour - 12;
		
		if (iHour < 10)
		{
			sTime = "0" + itoa(iHour);
		}
		else
		{
			sTime = itoa(iHour);
		}
			
		sTime = itoa(iHour);
		sAMPM = "PM";
	}
		
	if (iMinute < 10)
	{
		sTime = sTime + ":0" + itoa(iMinute) + " " + sAMPM;
	}
	else
	{
		sTime = sTime + ":" + itoa(iMinute) + " " + sAMPM;			
	}
	
	if (Debug)
	{
		trace ("  Time:%s\n", sTime);
	}
	
	return (sTime);		
}

Integer_Function TimeToInteger(string sData, integer iFormat)
{
	integer iTimeValue,
    			iTimeH,
    			iTimeM;
    
	// Format 1 = Time as Hours & Minutes (18:00 = 1800)
  // Format 2 = Time as Minutes (18:00 = 1080)
    
  iTimeValue = 0;
    
  if (iFormat = 1)
  {
  	iTimeH = atoi(left(sData, 2)) * 100;
  	iTimeM = atoi(mid(sData, 4, 2));
    iTimeValue = iTimeH + iTimeM;
  }
  else if (iFormat = 2)
  {
    iTimeH = atoi(left(sData, 2)) * 60;
    iTimeM = atoi(mid(sData, 4, 2));
    iTimeValue = iTimeH + iTimeM;    	
  }
    
  return (iTimeValue);
}

String_Function IToLA(integer iNumber)
{
	string sNumber[2];
	
	if (iNumber < 10)
	{
		sNumber = "0" + itoa(iNumber);
	}
	else
	{
		sNumber = itoa(iNumber);
	}
	
	return (sNumber);
}

Function ReserveNowSetLabels(Integer Max_Time, Integer iDurationMinutes)
{
  if (Max_Time = 30)
  {
    Reserve_Room_Select_30$ = ItoA(iDurationMinutes) + " Min";
  }
  else if (Max_Time = 60)
  {
    Reserve_Room_Select_60$ = ItoA(iDurationMinutes) + " Min";
  }
  else if (Max_Time = 90)
  {
    Reserve_Room_Select_90$ = ItoA(iDurationMinutes) + " Min";
  }
  else
  {
    //Do Nothing? Error Handling?
  }
}

String_Function ReserveNowToIntDateFormat(ReserveNowData oData, String StartEnd)
{
  string result[19];
  if (StartEnd = "Start")
  {
    result = itoa(oData.iStartYear) + "-" + IToLA(oData.iStartMonth) + "-" + IToLA(oData.iStartDay) +
		         "T" + ItoLA(oData.iStartHour) + ":" + IToLA(oData.iStartMin) + ":" + IToLA(oData.iStartSec);
  }
  else if (StartEnd = "End")
  {
    result = itoa(oData.iEndYear) + "-" + IToLA(oData.iEndMonth) + "-" + IToLA(oData.iEndDay) +
		         "T" + ItoLA(oData.iEndHour) + ":" + IToLA(oData.iEndMin) + ":" + IToLA(oData.iEndSec);
  }
  
  if (Debug)
  {
    trace ("\n** ReserveNowToIntDateFormat **\n");
    trace ("result: %s\n", result);
  }
  
  return (result);
}

Function CopyReserveNowData(ReserveNowData Dest, ReserveNowData Src)
{
  Dest.iStartYear     = Src.iStartYear;
  Dest.iStartMonth    = Src.iStartMonth;
  Dest.iStartDay      = Src.iStartDay;
  Dest.iStartHour     = Src.iStartHour;
  Dest.iStartMin      = Src.iStartMin;
  Dest.iStartSec      = Src.iStartSec;

  Dest.iEndYear       = Src.iEndYear;
  Dest.iEndMonth      = Src.iEndMonth;
  Dest.iEndDay        = Src.iEndDay;
  Dest.iEndHour       = Src.iEndHour;
  Dest.iEndMin        = Src.iEndMin;
  Dest.iEndSec        = Src.iEndSec;
}

Function SetReserveNowData(ReserveNowData Dest,
                           Integer iStartYear, Integer iStartMonth, Integer iStartDay, Integer iStartHour, Integer iStartMin, Integer iStartSec,
                           Integer iEndYear, Integer iEndMonth, Integer iEndDay, Integer iEndHour, Integer iEndMin, Integer iEndSec
                          )
{
  Dest.iStartYear     = iStartYear;
  Dest.iStartMonth    = iStartMonth;
  Dest.iStartDay      = iStartDay;
  Dest.iStartHour     = iStartHour;
  Dest.iStartMin      = iStartMin;
  Dest.iStartSec      = iStartSec;

  Dest.iEndYear       = iEndYear;
  Dest.iEndMonth      = iEndMonth;
  Dest.iEndDay        = iEndDay;
  Dest.iEndHour       = iEndHour;
  Dest.iEndMin        = iEndMin;
  Dest.iEndSec        = iEndSec;
}

Function ReserveNowSetData(Integer Max_Time, ReserveNowData Temp)
{
	if (Max_Time = 30)
	{
	  CopyReserveNowData(Select30Min, Temp);
	}
	else if (Max_Time = 60)
	{
	  CopyReserveNowData(Select60Min, Temp);
	}
	else if (Max_Time = 90)
	{
	  CopyReserveNowData(Select90Min, Temp);
	}
}

Integer_Function SetStartEnd(Integer Min_Time, Integer Max_Time)
{
  integer iFreeUntilMinutes,
  				iStartTimeMinutes,
  				iEndTimeMinutes,
          iDurationMinutes;

  integer iStartMonth,
  				iStartDay,
  				iStartYear,
  				iEndMonth,
  				iEndDay,
  				iEndYear;

  integer iStartHour,
  				iStartMin,
  				iEndHour,
  				iEndMin;
  				  				  
  string sCurrentDate[10],
  			 sCurrentTime[8],
  			 sFreeUntilDate[20],
  			 sFreeUntilTime[8];

  integer iCurrentMonth,
  				iCurrentDay,
  				iCurrentYear,
  				iCurrentDaysInMonth;
  
  string sStartTime[8],
  			 sEndTime[8];
  
  ReserveNowData Temp;
  				  
  if (Debug)
   trace ("\n** SetStartEnd **\n");
  	
  sCurrentDate = date(3);
  sCurrentDate = left(sCurrentDate, 4) + "-" + mid(sCurrentDate, 6, 2) + "-" + right(sCurrentDate, 2);
	
	iCurrentMonth = atoi(mid(sCurrentDate, 6, 2));
	iCurrentDay = atoi(right(sCurrentDate, 2));
	iCurrentYear = atoi(left(sCurrentDate, 4));
	    
  sCurrentTime = time();
  iStartTimeMinutes = TimeToInteger(sCurrentTime, 2);
    
  sFreeUntilDate = left(Free_Until$, 10);
  sFreeUntilTime = right(Free_Until$, 8);
  iFreeUntilMinutes = TimeToInteger(sFreeUntilTime, 2);
   	
	// Set the end time minutes
	iEndTimeMinutes = iStartTimeMinutes + Max_Time;
	
  if (Reserve_Room_Even_End_Time)
  {
    iEndTimeMinutes = iEndTimeMinutes - (iEndTimeMinutes MOD 30);
  }
  
	if (Debug)
	{
		trace ("  CurrentDate:%s\n", sCurrentDate);
		trace ("  FreeUntilDate:%s\n", sFreeUntilDate);
		trace ("  CurrentMonth:%u\n", iCurrentMonth);
		trace ("  CurrentDay:%u\n", iCurrentDay);
		trace ("  CurrentYear:%u\n", iCurrentYear); 
		trace ("  FreeUntilMinutes:%u\n", iFreeUntilMinutes);
		trace ("  StartTimeMinutes:%u\n", iStartTimeMinutes);
		trace ("  EndTimeMinutes:%u\n", iEndTimeMinutes);
	}
	
			  	
  // Free until date after today?
  if (sFreeUntilDate > sCurrentDate)
  {
  	// Yes, date after today. Reserve to the maximum time.
  		
		if (Debug)
		{
			trace ("  Free until date > date today.\n");
		}
  }
  else
  {
  	// Date not after today. See how long we can reserve.

		if (Debug)
		{
			trace ("  Free until date = date today.\n");
		}
		
		// Is the end time into the next meeting?
		if (iEndTimeMinutes > iFreeUntilMinutes)
		{
			// Yes, end time is into next meeting. Need to trim back.
			
			if (Debug)
			{
				trace ("  End time into next meeting. Need to trim back.\n");
			}
			
			// Make end time = next start time
			iEndTimeMinutes = iFreeUntilMinutes;
		}
		else
		{
			// End time not into next meeting. Leave as is.

			if (Debug)
			{
				trace ("  End time not into next meeting. Leave as is.\n");
			}			
		}
			
	}

	// Check the end time hour value.
	iEndHour = iEndTimeMinutes / 60;

	if (Debug)
	 trace ("  EndHour:%u\n", iEndHour);
		
	// See if end hour is next day.
	if (iEndHour >= 24)
	{
		// Yes, end hour is next day.
		
		if (Debug)
		 trace ("  EndHour >= 24\n");
						
		// ** Are we on the last day of the month?
			
		// Days in month
		iCurrentDaysInMonth = DaysInMonth(iCurrentMonth, iCurrentYear);
			
		// Last day?
		if (iCurrentDay < iCurrentDaysInMonth)
		{
			// No. Still have days left. Goto next day.
				
			iStartMonth = iCurrentMonth;
			iStartDay = iCurrentDay + 1;
			iStartYear = iCurrentYear; 
		}
		else
		{
			// Yes, on last day. Need to goto next month.
				
			// Before going to next month, see if we need to goto next year.
			if (iCurrentMonth < 12)
			{
				// No, do not need to goto next year.
					
				iStartMonth = iStartMonth + 1;
				iStartDay = 1;
				iStartYear = iCurrentYear;
			}
			else
			{
				// Yes, on the last month of the year. Goto next year.
					
				iStartMonth = 1;
				iStartDay = 1;
				iStartYear = iStartYear + 1;
			}
		}
	}
	else
	{
		// End hour is not next day.
		
		iStartMonth = iCurrentMonth;
		iStartDay = iCurrentDay;
		iStartYear = iCurrentYear;
		
		iStartHour = iStartTimeMinutes / 60;
		iStartMin = iStartTimeMinutes MOD 60;		
		
		iEndMonth = iCurrentMonth;
		iEndDay = iCurrentDay;
		iEndYear = iCurrentYear;
		
		iEndHour = iEndTimeMinutes / 60;
		iEndMin = iEndTimeMinutes MOD 60;
	}
  
  iDurationMinutes = iEndTimeMinutes - iStartTimeMinutes;
  
  sStartTime = itoa(iStartHour) + ":" + itoa(iStartMin);
	sStartTime = Time24ToTime12(sStartTime);
  
 	sEndTime = itoa(iEndHour) + ":" + itoa(iEndMin);
	sEndTime = Time24ToTime12(sEndTime);
		
	if (Debug)
	{
		trace ("  iStartMonth:%u\n", iStartMonth);
		trace ("  iStartDay:%u\n", iStartDay);
		trace ("  iStartYear:%u\n", iStartYear);
		trace ("  iStartHour:%u\n", iStartHour);
		trace ("  iStartMin:%u\n", iStartMin);
		trace ("  iEndMonth:%u\n", iEndMonth);
		trace ("  iEndDay:%u\n", iEndDay);
		trace ("  iEndYear:%u\n", iEndYear);
		trace ("  iEndHour:%u\n", iEndHour);
		trace ("  iEndMin:%u\n", iEndMin);
    trace ("  iDurationMinutes:%u\n", iDurationMinutes);
	}
  
  Temp.iStartYear     = iStartYear;
  Temp.iStartMonth    = iStartMonth;
  Temp.iStartDay      = iStartDay;
  Temp.iStartHour     = iStartHour;
  Temp.iStartMin      = iStartMin;
  Temp.iStartSec      = 0;

  Temp.iEndYear       = iEndYear;
  Temp.iEndMonth      = iEndMonth;
  Temp.iEndDay        = iEndDay;
  Temp.iEndHour       = iEndHour;
  Temp.iEndMin        = iEndMin;
  Temp.iEndSec        = 0;
 
  if (Reserve_Room_Time_Select)
  {
    ReserveNowSetLabels(Max_Time, iDurationMinutes);
    ReserveNowSetData(Max_Time, Temp);
    
  }
  else
  {  			
	  // Set labels
	  Reserve_Room_Start$ = sStartTime;
	  Reserve_Room_End$ = sEndTime;
		
    CopyReserveNowData(ConfirmEvent, Temp);
    
		// Create dtStart & dtEnd
		g_sReserveDTStart = ReserveNowToIntDateFormat(ConfirmEvent, "Start");							
		g_sReserveDTEnd = ReserveNowToIntDateFormat(ConfirmEvent, "End");
 	}
  
  if (iDurationMinutes < Min_Time)
  {
     return (FALSE);
  }
 
  return (TRUE);
}

Function ReserveRoom()
{
  string sXML[1000];
  
  if (Debug)
   trace ("\n** ReserveRoom **\n");
   
  Module_Request_Mode = REQUEST_MODE_BUSY;
  
	// Create RequestID
	g_sReserveRequestID = "AvailRoomsCreate" + itoa(getHSeconds());
	
	// Build XML
	sXML =
		"<CreateSchedule>" +
		"<RequestID>" + g_sReserveRequestID + "</RequestID>" +
		"<RoomID>" + Room_ID$ + "</RoomID>" +
			"<Event>" +
				"<dtStart>" + g_sReserveDTStart + "</dtStart>" +
				"<dtEnd>" + g_sReserveDTEnd + "</dtEnd>" +
				"<Organizer>" + Reserve_Now_Organizer$ + "</Organizer>" +
				"<Subject>" + Reserve_Now_Subject$ + "</Subject>" +
			"</Event>" +
		"</CreateSchedule>";

	if (Debug)
  {
    trace ("  sXML: %s\n", sXML);
  }
   
	// Send request out.
	do
	{
		
		if (len(sXML) > 240)
		{
			To_RV_CreateMeeting$ = removebylength(240, sXML);
		}
		else
		{
			To_RV_CreateMeeting$ = removebylength(len(sXML), sXML);
		}
		
	} until (len(sXML) = 0);
}

Function ProcessCreateData(string sData)
{
  integer bSuccess;
  
  string sRemoved[255],
  			 sMeetingID[MAX_MEETING_ID_LEN];
  
  if (Debug)
  {
  	trace ("\n** ProcessCreateData **\n");
  	trace ("  DataLen:%u\n", len(sData));
	}
	
	Module_Request_Mode = REQUEST_MODE_PROCESSING;
	
	bSuccess = FALSE;
	
  do
  {
  	sRemoved = remove(">", sData);
  	if (Debug)
    {
      trace ("sRemoved: %s", sRemoved);
    }
    
		if (find("</MeetingID>", sRemoved))
		{
      // Check MeetingID.
      
      sMeetingID = left(sRemoved, len(sRemoved) - 12);
      
      if (len(sMeetingID) > 0)
      {
      	bSuccess = TRUE;       
			}
		}  	
  	
  } until (len(sData) = 0);
  
  if (bSuccess)
  {
  	if (Debug)
  	{
  		trace ("  Success\n");
		}
  	
  	Module_Request_Mode = REQUEST_MODE_SUCCESS;
  }
  else
  {
  	if (Debug)
  	{
  		trace ("  Failure\n");
		}
  	
  	Module_Request_Mode = REQUEST_MODE_FAILURE;  	
  }	
	
	Module_Request_Mode = REQUEST_MODE_IDLE;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

RELEASE RoomView_Online
{
	g_sReserveRequestID = "";
	
	Module_Request_Mode = REQUEST_MODE_FAILURE;
	Module_Request_Mode = REQUEST_MODE_IDLE;
}

CHANGE Free_Until$
{
	integer bDone;
	
	if (Module_Request_Mode = REQUEST_MODE_IDLE)
	{
		if (len(Free_Until$) > 17 && len(Room_ID$) > 0)
		{
      if (Reserve_Room_Time_Select)
      {
         //Clear Buttons First
         Reserve_Room_Select_30_Mode = HIDE_BTN;
         Reserve_Room_Select_60_Mode = HIDE_BTN;
         Reserve_Room_Select_90_Mode = HIDE_BTN;
         
         Set_Select_Valid = TRUE;
         
         if (SetStartEnd(0, 30))
         {
           Reserve_Room_Select_30_Mode = SHOW_BTN;
         }
         if (SetStartEnd(30, 60))
         {
           Reserve_Room_Select_60_Mode = SHOW_BTN;
         }
         if (SetStartEnd(60, 90))
         {
           Reserve_Room_Select_90_Mode = SHOW_BTN;
         }
         
         Set_Select_Valid = FALSE;
      }
      else
      {
        bDone = SetStartEnd(0, Max_Reserve_Duration);
        
			  Set_Start_End_Valid = TRUE;
			  Set_Start_End_Valid = FALSE;
		  }
    }
		else
		{
			Set_Start_End_Invalid = TRUE;
			Set_Start_End_Invalid = FALSE;		
		}
	}
}

PUSH Reserve_Room_OK
{
  g_sReserveDTStart = ReserveNowToIntDateFormat(ConfirmEvent, "Start");							
  g_sReserveDTEnd   = ReserveNowToIntDateFormat(ConfirmEvent, "End");
	call ReserveRoom();	
}

PUSH Reserve_Room_Select_30
{
  g_sReserveDTStart = ReserveNowToIntDateFormat(Select30Min, "Start");							
  g_sReserveDTEnd   = ReserveNowToIntDateFormat(Select30Min, "End");
  call ReserveRoom();
}
PUSH Reserve_Room_Select_60
{
  g_sReserveDTStart = ReserveNowToIntDateFormat(Select60Min, "Start");							
  g_sReserveDTEnd   = ReserveNowToIntDateFormat(Select60Min, "End");
  call ReserveRoom();
}
PUSH Reserve_Room_Select_90
{
  g_sReserveDTStart = ReserveNowToIntDateFormat(Select90Min, "Start");							
  g_sReserveDTEnd   = ReserveNowToIntDateFormat(Select90Min, "End");
  call ReserveRoom();
}


PUSH Reserve_Room_Timeout
{
	g_sReserveRequestID = "";
	
	Module_Request_Mode = REQUEST_MODE_FAILURE;
	Module_Request_Mode = REQUEST_MODE_IDLE;		
}

CHANGE From_Mod_Workday_DataOut$
{
	string sData[DATA_BUFF_SIZE];
	
	if (g_bRXOK)
	{
		g_bRXOK = FALSE;
		
		while(1)
		{
			sData = gather ("</Data>", From_Mod_Workday_DataOut$);
			
			if (find(g_sReserveRequestID, sData))
			 call ProcessCreateData(sData);
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{

	WaitForInitializationComplete();
	
	g_bRXOK = TRUE;
	
	Module_Request_Mode = REQUEST_MODE_IDLE;
}
