/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0


#DEFINE_CONSTANT MAX_STORED_IDS 		150
#DEFINE_CONSTANT MOD_BUFF_LEN				1000
#DEFINE_CONSTANT RESPONSE_BUFF_LEN	2000

#DEFINE_CONSTANT TYPE_NOSHOW  1
#DEFINE_CONSTANT TYPE_DEBUG   2

// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
              Debug_Clear_All_Stored_Data,
              Debug_Print_All_Stored_Data,
              Cleanup_Stored_Data; 

ANALOG_INPUT Max_Stored_Data_Days; 


STRING_INPUT RoomID[150];
 
BUFFER_INPUT From_RV_RemoveResponse$[RESPONSE_BUFF_LEN],
						 From_Workday_Module_NoShow_Data$[MOD_BUFF_LEN]; 

DIGITAL_OUTPUT Cleanup_Busy_FB,
							 Removed_Meeting_Single,
							 Removed_Meeting_Series;
 
ANALOG_OUTPUT Debug_NoShow_Count;
 
STRING_OUTPUT Status$,
							Removed_Meeting_Single_ID$,
							Removed_Meeting_Series_ID$,
							To_RV_RemoveMeeting$; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

NONVOLATILE STRUCTURE Data
{
  string sSubject[200];
  string sMeetingID[150];
  string sRVMeetingID[50];
  string sDataDate[15];
  integer iNoShowCount;
  integer iSentNoShowCount;
};

Data NoShowData[MAX_STORED_IDS];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK1, g_bRXOK2, g_bCleanupBusy;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING g_sLastRemovedID[150];

NONVOLATILE STRING g_sInitialized[3];

INTEGER g_iDataType;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/


/////////////////////////////////////////////////////////////////////
//
// Function: DaysInMonth()
//
// Parameters: Month, Year
//
// Return Value: Days in Month
//
// Description: Returns the days for a given month.
//
//
/////////////////////////////////////////////////////////////////////

Integer_Function DaysInMonth(integer iMonth, integer iYear)
{
  cswitch (iMonth)
  {
    case(1): //january
    {
      return (31);
      break;
    }
    case(2): //february
    {
      if (iYear mod 4 = 0)
      {
        return(29);
        break;
      }
      else
      {
        return(28);
        break;      
      }
    }
    case(3): //march
    {
      return(31);
      break;
    }
    case(4): //april
    {
      return(30);
      break;
    }
    case(5): //may
    {
      return(31);
      break;
    }
    case(6): //june
    {
      return(30);
      break;
    }
    case(7): //july
    {
      return(31);
      break;
    }
    case(8): //august
    {
      return(31);
      break;
    }
    case(9): //september
    {
      return(30);
      break;
    }
    case(10): //october
    {
      return(31);
      break;
    }
    case(11): //november
    {
      return(30);
      break;
    }
    case(12): //december
    {
      return(31);
      break;
    }
  }  
}

Function RemoveMeeting(integer bRecurring, string MeetingID, string RVMeetingID, integer NoShowCount)
{
  string sTemp[500], sNoShowCount[1];
  string sBool[5];
  string sRequestID[50];

  if (Debug)
   trace ("Remove Meeting. Count:%u\n", NoShowCount);
  
  sRequestID = "NoShow" + itoa(gethseconds());
  
  sNoShowCount = itoa(NoShowCount);
  
  if (bRecurring)
  {
  	sBool = "True";
  }
  else
  {
  	sBool = "False";
  }
  
  Status$ = "Sent: ID="+ MeetingID + " Recurring=" + sBool + " Count=" + sNoShowCount;
  
  sTemp = "<RequestRemoveSchedule>" +
           "<RequestID>" + sRequestID + "</RequestID>" +
           "<RoomID>" + RoomID + "</RoomID>" +
            "<MeetingEvents>" +
             "<Event>" +
              "<ID>" + MeetingID + "</ID>" +
              "<Recurring>" + sBool + "</Recurring>" +
              "<NoShowCount>" + sNoShowCount + "</NoShowCount>" +
             "</Event>" +
            "</MeetingEvents>" +
          "</RequestRemoveSchedule>";
    
  if (len(sTemp) > 240)
  {
    To_RV_RemoveMeeting$ = left(sTemp, 240);
    To_RV_RemoveMeeting$ = right(sTemp, len(sTemp) - 240);
  }
  else
  {
  	To_RV_RemoveMeeting$ = sTemp;  
	}
	
	if (!bRecurring)
	{
		Removed_Meeting_Single_ID$ = RVMeetingID;
		
		pulse (10, Removed_Meeting_Single);		
	}
	else
	{
		//Meeting is recurring.
		
		//Was this a removal?
		if (NoShowCount = 3)
		{
			//No Show Count = 3, so this is an actual removal
			Removed_Meeting_Series_ID$ = RVMeetingID;
		
			pulse (10, Removed_Meeting_Series);			
		}		
	}
}


/////////////////////////////////////////////////////////////////////
//
// Function: DayDiff()
//
// Parameters: StartDate(MM/DD/YYYY), EndDate(MM/DD/YYYY)
//
// Return Value: Day Difference
//
// Description: Returns the day difference between two dates.
//              *** End date must be greater than start date ***
//
/////////////////////////////////////////////////////////////////////

Integer_Function DayDiff(string StartDate, string EndDate)
{
  integer i;
  integer iDiffDays, iDaysUntil, iDaysFrom;
  integer iStartMonth, iEndMonth;
  integer iStartDay, iEndDay;
  integer iStartYear, iEndYear;
  
  if (Debug)
  {
    trace ("\n** DayDiff **\n");
    trace ("    StartDate:%s\n", StartDate);
    trace ("    EndDate:%s\n", EndDate);
  }
  	
  iStartMonth = atoi(left(StartDate, 2));
  iStartDay = atoi(mid(StartDate, 4, 2));
  iStartYear = atoi(right(StartDate, 4));
  	
  iEndMonth = atoi(left(EndDate, 2));
  iEndDay = atoi(mid(EndDate, 4, 2));
  iEndYear = atoi(right(EndDate, 4));
  	
  if (Debug)
  {
    trace ("    iStartMonth:%u\n", iStartMonth);
    trace ("    iStartDay:%u\n", iStartDay);
    trace ("    iStartYear:%u\n", iStartYear);    
    	
    trace ("    iEndMonth:%u\n", iEndMonth);
    trace ("    iEndDay:%u\n", iEndDay);
    trace ("    iEndYear:%u\n", iEndYear);
  }

  if (iStartYear <> iEndYear)
  {
    if (Debug)
     trace ("    Years Not Equal\n");
    
    //days until end of the year
    
    // get days until end of month
    iDaysUntil = DaysInMonth(iStartMonth, iStartYear) - iStartDay;
    
    if (Debug)
     trace ("    Days Until End of Current Month:%u\n", iDaysUntil);
    
    // if month <> 12, then get the rest of the days based on the months
    if (iStartMonth <> 12)
    {
      if (Debug)
       trace ("    Current Month <> 12. Add up all days based on month.\n");
      
      for (i = iStartMonth + 1 to 12)
      {
        iDaysUntil = iDaysUntil + DaysInMonth(i, iStartYear);
      } 
    }    
      
    if (Debug)
     trace ("    Total Days to the End of the Year:%u\n", iDaysUntil);
           
    //months from beginning of year
    
    // get the days from the beginning of the month
    iDaysFrom = DaysInMonth(iEndMonth, iEndYear);
    
    //if month <> 1, then get the rest of the days based on the months
    if (iEndMonth <> 1)
    {
      if (Debug)
       trace ("    End Month <> 1\n");
      
      for (i = 1 to iEndMonth - 1)
      {
        iDaysFrom = iDaysFrom + DaysInMonth(i, iEndYear);
      }
    }
    
    if (Debug)
     trace ("    Total Days from the Beginning of the Year:%u\n", iDaysFrom);
    
    iDiffDays = iDaysUntil + iDaysFrom;
  }
  else if (iStartMonth <> iEndMonth)
  {
    if (Debug)
     trace ("    Months Not Equal\n");

    //get days until end of month
    iDiffDays = DaysInMonth(iStartMonth, iStartYear) - iStartDay;    
    
    //get the days from the beginning of the month
    iDiffDays = iDiffDays + DaysInMonth(iEndMonth, iEndYear);
    
    //if months apart > 1, get the rest of the days based on the months
    if (iEndMonth - iStartMonth > 1)
    {
      if (Debug)
       trace ("    Month Difference > 1\n");
      
      for (i = iStartMonth + 1 to iEndMonth - 1)
      {
        iDiffDays = iDiffDays + DaysInMonth(i, iEndYear);
      }
    }    
  }
  else if (iStartDay <> iEndDay)
  {
    if (Debug)
     trace ("    Days Not Equal\n");
    
    iDiffDays = iEndDay - iStartDay;
  }
  
  if (Debug)
   trace ("    Total Day Diff:%u\n", iDiffDays);
   
  return(iDiffDays);  
}


Function CleanupData()
{
	integer i, iDayDiff;
	
	if (Debug)
	 trace ("\n** CleanupData **\n");
	
	for (i = 1 to MAX_STORED_IDS)
	{
		if (NoShowData[i].sDataDate < Date(1))
		{			
			//Dates are not equal. Check day diff.
			
			iDayDiff = DayDiff(Date(1), NoShowData[i].sDataDate);
			
			if (Debug)
			{
				trace ("    Dates Not Equal. DayDiff:%u\n", iDayDiff);
			}
			
			//Can the data be removed
			if (iDayDiff >= Max_Stored_Data_Days)
			{
				//Yes, data can be removed.
				
				if (debug)
				 trace ("    Data DayDiff >= Max Stored Days. Clearing data.\n");
				
				NoShowData[i].sMeetingID = "";
				NoShowData[i].sRVMeetingID = "";
				NoShowData[i].sSubject = "";
				NoShowData[i].iNoShowCount = 0;				
			} 
		}		
	}	
}

Integer_Function FirstEmptySlot()
{
  integer i, iEmptySlot;
  
  if (Debug)
   trace ("\n** FirstEmptySlot **\n");
  
  iEmptySlot = 0;
  
  for (i = 1 to MAX_STORED_IDS)
  {
    if (len(NoShowData[i].sMeetingID) = 0)
    {
      iEmptySlot = i;
      break;
    }
  }
  
  if (Debug)
   trace ("    Slot=%u\n", iEmptySlot);
  
  return (iEmptySlot);
}

Integer_Function NoShowIndex(string MeetingID)
{
  integer i, iNoShowIndex;
  
  if (Debug)
   trace ("\n** NoShowIndex **\n");
  
  iNoShowIndex = 0;
  
  for (i = 1 to MAX_STORED_IDS)
  {
    if (MeetingID = NoShowData[i].sMeetingID)
    {
      iNoShowIndex = i;
      break;
    }
  }
  
  if (Debug)
   trace ("    Index=%u\n", iNoShowIndex);
  
  return (iNoShowIndex);
}

Function ProcessData(string sData)
{
  string sRemoved[500],
  			 sTemp[500];
  
  integer iIndex,
  				iSlot,
  				iCount;
  
  integer bNoShow,
  				bRecurring;
  
  string sMeetingID[150],
  			 sRVMeetingID[50],
  			 sRecurring[35],
  			 sSubject[200];
  
  
  if (Debug)
   trace ("\n** ProcessData **\n");
	
	
	bNoShow = FALSE;
	bRecurring = FALSE;
	
	sMeetingID = "";
	sRVMeetingID = "";
	sSubject = "";
	
	do
	{
		sRemoved = remove(">", sData);
		
	  if (find("</Status>", sRemoved))
		{
		  if (find("NoShow", sRemoved))
		   bNoShow = TRUE;
		  else
		   bNoShow = FALSE;
		}
		else if (find("</MeetingID>", sRemoved))
		{
		  sMeetingID = left(sRemoved, len(sRemoved) - 12);
		}
		else if (find("</RVMeetingID>", sRemoved))
		{
		  sRVMeetingID = left(sRemoved, len(sRemoved) - 14);
		}
		else if (find("</Subject>", sRemoved))
		{
		  if (len(sRemoved) > 210)
		   sRemoved = left(sRemoved, 200);
		  
		  sSubject = left(sRemoved, len(sRemoved) - 10);
		}
		else if (find("</Recurring>", sRemoved))
		{
		  if (find("True", sRemoved))
		  {
		    bRecurring = TRUE;
		    sRecurring = "<Recurring>True</Recurring>";
		  }
		  else
		  {
		    bRecurring = FALSE;
		    sRecurring = "<Recurring>False</Recurring>";
		  }
		}
		else if (find("</NoShowData>", sRemoved))
		{
		  // Have valid data?
		  if (len(sMeetingID) > 0)
		  {
		  
			  if (!bRecurring && bNoShow) //meeting is not recurring with a no show
		    {
			    if (Debug)
		       trace ("    Single Meeting with NoShow\n");
		      
		      Debug_NoShow_Count = 1;
		      
		      // Only send out once.
		      if (g_sLastRemovedID <> sMeetingID)
		      {      	
		    		g_sLastRemovedID = sMeetingID;
		    		
		    		call RemoveMeeting(bRecurring, sMeetingID, sRVMeetingID, 0);
		    	}
		    	
		    	wait(200)
		    	 Debug_NoShow_Count = 0;
		    }
		    else if (bRecurring && bNoShow) //meeting is recurring with a no show
			  {
		      if (Debug)      
			     trace ("    Recurring meeting & no show\n");
			    
		      //have we logged this meeting ID yet?
		      iIndex = NoShowIndex(sMeetingID);
		        
			    if (iIndex = 0) //first no show for this meeting
			    {
		        if (Debug)
			       trace ("    First no show for this meeting. Storing date and count = 1\n");
			      
			      iSlot = FirstEmptySlot();
			      
			      if (iSlot > 0) //put the data in the first empty slot
			      {
			        iCount = 1;
			          
			        NoShowData[iSlot].sMeetingID = sMeetingID; //store the meeting ID
			        NoShowData[iSlot].sRVMeetingID = sRVMeetingID; //store the RV meeting ID
			        NoShowData[iSlot].sSubject = sSubject; //store the subject
			        NoShowData[iSlot].iNoShowCount = iCount; //store the count
			        NoShowData[iSlot].iSentNoShowCount = 0; //store the count
			        NoShowData[iSlot].sDataDate = date(1); //store the date
			        
			        Debug_NoShow_Count = iCount;
			      }
			    }
			    else //not the first no show 
			    {        
		        if (NoShowData[iIndex].sDataDate <> date(1)) //we have not logged this date/meeting id yet
			      {
		          if (Debug)
			         trace ("    Another no show and we have not logged this date yet\n");
			        
		          NoShowData[iIndex].sDataDate = date(1); //update the date
		          
		          iCount = NoShowData[iIndex].iNoShowCount; //what is the current count?
			        
		          if (Debug)
		           trace ("    Current no show count:%u\n", iCount);        
			        
		          if (iCount = 1) //only one
			        {
			          if (Debug)
		             trace ("    Count is now 2\n");
		            
		            iCount = 2;  
			          NoShowData[iIndex].iNoShowCount = iCount;            
		            
		            //Make sure to only send once.
		            if (NoShowData[iIndex].iSentNoShowCount <> iCount)
		            {
		            	NoShowData[iIndex].iSentNoShowCount = iCount;
		            	
		            	call RemoveMeeting(bRecurring, sMeetingID, sRVMeetingID, iCount);
			        	}
			        }
			        else if (iCount = 2) //already two
			        {
			          if (Debug)
		             trace ("    Count is now 3\n");
		            
		            iCount = 3;
		            Debug_NoShow_Count = iCount; //show count for a moment            
		
		            //clear stored data
		            NoShowData[iIndex].sMeetingID = "";
		            NoShowData[iIndex].sRVMeetingID = "";
			          NoShowData[iIndex].iNoShowCount = 0;
			          NoShowData[iIndex].iSentNoShowCount = 0;
		            NoShowData[iIndex].sDataDate = "";
			          
			          call RemoveMeeting(bRecurring, sMeetingID, sRVMeetingID, iCount);
			          
			          wait(200)
			           Debug_NoShow_Count = 0;
			        }
			      }
		        else //we have already logged this no show date
		        {
		          if (Debug)
		           trace ("    We have already logged this NoShow date\n");
		        }
		        
		        Debug_NoShow_Count = NoShowData[iIndex].iNoShowCount;
			    } 
			  }
			  else if (bRecurring && !bNoShow) //meeting is recurring with a show
			  {
		      if (Debug)
			     trace ("    Meeting is recurring with show\n");
			    
		      iIndex = NoShowIndex(sMeetingID);
		        
			    if (iIndex > 0)
			    {
		        if (NoShowData[iIndex].sDataDate = date(1))
		        {
			        //Already logged this meeting as a NoShow for today
		          //so, a Show now means nothing
		          
		          if (Debug)
		           trace ("    Already logged this meeting as a NoShow\n");
		        }
		        else //have not logged this meeting as a NoShow for today yet
		        {
		          if (Debug)
		           trace ("    Meeting not logged as NoShow for today. Clearing it from list\n");
		          
		          Debug_NoShow_Count = 0;
		           
		          NoShowData[iIndex].sMeetingID = "";
		          NoShowData[iIndex].sRVMeetingID = "";
			        NoShowData[iIndex].iNoShowCount = 0;
			        NoShowData[iIndex].iSentNoShowCount = 0;
			        NoShowData[iIndex].sDataDate = "";
		        }  
			    }
			    
			  }
			  
			} // end if (len(sMeetingID) > 0)
			
			else
			{
				// Do not have meeting ID, so no meeting active.
				
				Debug_NoShow_Count = 0;
				
				Status$ = "";
			}
			 
		} // end else if (find("</NoShowData>", sRemoved))		
				
	} until (len(sData) = 0); 
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Debug_Clear_All_Stored_Data
{
  integer i;

  for (i = 1 to MAX_STORED_IDS)
  {
    NoShowData[i].sMeetingID = "";
    NoShowData[i].sRVMeetingID = "";
    NoShowData[i].sSubject = "";
    NoShowData[i].sDataDate = "";
    NoShowData[i].iNoShowCount = 0;
    NoShowData[i].iSentNoShowCount = 0;
  }  
  
}

PUSH Debug_Print_All_Stored_Data
{
	integer i;
	
	trace ("\n*** No Show Stored Data ***\n");
	
	for (i = 1 to MAX_STORED_IDS)
	{
		if (len(NoShowData[i].sMeetingID) > 0)
		{
			trace (" \nIndex: %u\n", i);
			trace ("   MeetingID: %s\n", NoShowData[i].sMeetingID);
			trace ("   Subject: %s\n", NoShowData[i].sSubject);
			trace ("   Date Added: %s\n", NoShowData[i].sDataDate);
			trace ("   NoShow Count: %u\n", NoShowData[i].iNoShowCount);
			trace ("   Sent NoShow Count: %u\n", NoShowData[i].iSentNoShowCount);
		}	
	}
}

PUSH Cleanup_Stored_Data
{
	if (!g_bCleanupBusy)
	{
		g_bCleanupBusy = TRUE;	
		Cleanup_Busy_FB = TRUE;
		
		call CleanupData();
		
		g_bCleanupBusy = FALSE;
		Cleanup_Busy_FB = FALSE;
	}
}


CHANGE From_Workday_Module_NoShow_Data$
{
  string sData[MOD_BUFF_LEN];
  
  if (g_bRXOK1)
  {
    g_bRXOK1 = FALSE;
    
    while (1)
    {
    	sData = gather ("</NoShowData>", From_Workday_Module_NoShow_Data$);
    	
    	call ProcessData(sData);
    }
  }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
  integer i;
  
  WaitForInitializationComplete();
  
  g_bRXOK1 = TRUE;
  
  if (g_sInitialized <> "YES")
  {
    for (i = 1 to MAX_STORED_IDS)
    {
      NoShowData[i].sMeetingID = "";
      NoShowData[i].sRVMeetingID = "";
      NoShowData[i].iNoShowCount = 0;
      NoShowData[i].iSentNoShowCount = 0;
    }
    
    g_sInitialized = "YES";
  }
}


