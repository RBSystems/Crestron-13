/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT TRUE		1
#DEFINE_CONSTANT FALSE	0

#DEFINE_CONSTANT INPUT_BUFF_SIZE	2000

#DEFINE_CONSTANT MAX_PRESET_FIELD_SLOTS	5

#DEFINE_CONSTANT MAX_MEETING_ID_LEN						125
#DEFINE_CONSTANT MAX_PRESET_IMAGE_SOURCE_LEN	255
#DEFINE_CONSTANT MAX_WELCOME_MSG_LEN 					150

#DEFINE_CONSTANT MAX_PRESET_NAME_LEN					100
#DEFINE_CONSTANT MAX_PRESET_FIELD_LABEL_LEN		100
#DEFINE_CONSTANT MAX_PRESET_FIELD_VALUE_LEN		100

// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
//#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Debug,
							SchedInterWork_Mod_Connected,
							Start_Meeting,
							End_Meeting;
							 
// ANALOG_INPUT 
// STRING_INPUT 
BUFFER_INPUT From_SchedInterWork_Mod_DataOut$[INPUT_BUFF_SIZE]; 

DIGITAL_OUTPUT Enable_Start_Meeting_Button;
 
ANALOG_OUTPUT Preset_Slot;
 
STRING_OUTPUT To_SchedInterWork_Mod_DataIn$,
							Start_Meeting_Button_Label$,
							Preset_Image1$,
							Preset_Image2$,
							Preset_Welcome_Msg$,
							Preset_Name$;
							
// *** Array Defs ***
STRING_OUTPUT Preset_Field_Slot_Label$[MAX_PRESET_FIELD_SLOTS],
							Preset_Field_Slot_Value$[MAX_PRESET_FIELD_SLOTS];
 





/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
STRUCTURE PresetData
{
	integer EventIndex;
	
	string MeetingID[MAX_MEETING_ID_LEN];
	
	string StartDate[10];
	string StartTime[8];
	
	string ImageSource1[MAX_PRESET_IMAGE_SOURCE_LEN];
	string ImageSource2[MAX_PRESET_IMAGE_SOURCE_LEN];
	
  string WelcomeMessage[MAX_WELCOME_MSG_LEN];
  
  string Name[MAX_PRESET_NAME_LEN];
  
  integer Slot;
  
  string FieldSlot1Label[MAX_PRESET_FIELD_LABEL_LEN];
  string FieldSlot1Value[MAX_PRESET_FIELD_VALUE_LEN];
  
  string FieldSlot2Label[MAX_PRESET_FIELD_LABEL_LEN];
  string FieldSlot2Value[MAX_PRESET_FIELD_VALUE_LEN];
  
  string FieldSlot3Label[MAX_PRESET_FIELD_LABEL_LEN];
  string FieldSlot3Value[MAX_PRESET_FIELD_VALUE_LEN];
  
  string FieldSlot4Label[MAX_PRESET_FIELD_LABEL_LEN];
  string FieldSlot4Value[MAX_PRESET_FIELD_VALUE_LEN];
  
  string FieldSlot5Label[MAX_PRESET_FIELD_LABEL_LEN];
  string FieldSlot5Value[MAX_PRESET_FIELD_VALUE_LEN];
    
};

PresetData Preset[2];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER g_bRXOK1;

// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function FormatTime(string sData)
{
  integer iHour, iMinute;
  string sHour[2], sMinute[2], sAMPM[2];
  string sTime[8];

	if (Debug)
	{
		trace ("\n*** FormatTime ***\n");
		trace ("  sData:%s\n", sData);
	}
	  
  iHour = atoi(left(sData, 2));
  iMinute = atoi(right(sData, 2));
	  
  if (iHour = 0)
  {
    sAMPM = "AM";
        
    sHour = "12";
  }
  else if (iHour > 0 && iHour < 12)
	{
	  sAMPM = "AM";
	      
    sHour = itoa(iHour);      
  }
	else if (iHour = 12)
	{
	  sHour = itoa(iHour);
	  sAMPM = "PM";
	}
	else
	{
	  sAMPM = "PM";
    iHour = iHour - 12;
        
    sHour = itoa(iHour);
	}
	      
	if (iMinute < 10)
   sMinute = "0" + itoa(iMinute);
  else
   sMinute = itoa(iMinute);
	      
	sTime = sHour + ":" + sMinute + " " + sAMPM;
    
  return (sTime);
}


Function ClearPresetData(integer iPreset)
{
	if (Debug)
	{
		trace ("\n*** ClearPresetData ***\n");
		trace ("  iPreset:%u\n", iPreset);
	}
	
	Preset[iPreset].EventIndex = 0;
	
	Preset[iPreset].MeetingID = "";
	
	Preset[iPreset].StartDate = "";
	Preset[iPreset].StartTime = "";
	
	Preset[iPreset].WelcomeMessage = "";
	
	Preset[iPreset].ImageSource1 = "";
	Preset[iPreset].ImageSource2 = "";
	
	Preset[iPreset].Slot = 0;
	Preset[iPreset].Name = "";
	
	Preset[iPreset].FieldSlot1Label = "";
	Preset[iPreset].FieldSlot1Value = "";
	
	Preset[iPreset].FieldSlot2Label = "";
	Preset[iPreset].FieldSlot2Value = "";
	
	Preset[iPreset].FieldSlot3Label = "";
	Preset[iPreset].FieldSlot3Value = "";
	
	Preset[iPreset].FieldSlot4Label = "";
	Preset[iPreset].FieldSlot4Value = "";
	
	Preset[iPreset].FieldSlot5Label = "";
	Preset[iPreset].FieldSlot5Value = "";
}

Function ProcessPresetData(string sData)
{
	integer iMarker1,
					iMarker2,
					iFieldSlot;
	
	string sRemoved[500],
				 sTemp[50],
				 sFieldLabel[MAX_PRESET_FIELD_LABEL_LEN],
				 sFieldValue[MAX_PRESET_FIELD_VALUE_LEN];
	
	if (Debug)
	 trace ("\n*** ProcessPresetData ***\n");
	
	// Clear current preset data
	call ClearPresetData(1);
	
	do
	{
		sRemoved = remove(">", sData);
	 					
		if (find("</MeetingPresets>", sRemoved))
		{
			// End of preset data.
			
			if (Debug)
			{
	 			trace ("  End of preset found.\n");
	 			trace ("   StartDate:%s\n", Preset[1].StartDate);
	 			trace ("   StartTime:%s\n", Preset[1].StartTime);
	 			trace ("   ImageSource1:%s\n", Preset[1].ImageSource1);
	 			trace ("   ImageSource2:%s\n", Preset[1].ImageSource2);
	 			trace ("   Slot:%u\n", Preset[1].Slot);
	 			trace ("   Name:%s\n", Preset[1].Name);
	 			trace ("   Field1Label:%s\n", Preset[1].FieldSlot1Label);
	 			trace ("   Field1Value:%s\n", Preset[1].FieldSlot1Value);
	 			trace ("   Field2Label:%s\n", Preset[1].FieldSlot2Label);
	 			trace ("   Field2Value:%s\n", Preset[1].FieldSlot2Value);
	 			trace ("   Field3Label:%s\n", Preset[1].FieldSlot3Label);
	 			trace ("   Field3Value:%s\n", Preset[1].FieldSlot3Value);
	 			trace ("   Field4Label:%s\n", Preset[1].FieldSlot4Label);
	 			trace ("   Field4Value:%s\n", Preset[1].FieldSlot4Value);
	 			trace ("   Field5Label:%s\n", Preset[1].FieldSlot5Label);
	 			trace ("   Field5Value:%s\n", Preset[1].FieldSlot5Value);			
			}
			
			// Have valid preset data?
			if (Preset[1].Slot > 0)
			{
				// Yes, have valid preset data.
				
				// Enable button.
				Enable_Start_Meeting_Button = TRUE;
				
				// Set button label.
				Start_Meeting_Button_Label$ = "Start " + Preset[1].StartTime + "\r" + "Meeting";
				
				// Set image locations.
				Preset_Image1$ = Preset[1].ImageSource1;
				Preset_Image2$ = Preset[1].ImageSource2;
				
				// Set welcome message.
				Preset_Welcome_Msg$ = Preset[1].WelcomeMessage;
				
				// Set preset slot.
				Preset_Slot = Preset[1].Slot;
				
				// Set preset name.
				Preset_Name$ = Preset[1].Name;
				
				// Set preset field labels
				Preset_Field_Slot_Label$[1] = Preset[1].FieldSlot1Label;
				Preset_Field_Slot_Label$[2] = Preset[1].FieldSlot2Label;
				Preset_Field_Slot_Label$[3] = Preset[1].FieldSlot3Label;
				Preset_Field_Slot_Label$[4] = Preset[1].FieldSlot4Label;
				Preset_Field_Slot_Label$[5] = Preset[1].FieldSlot5Label;
				
				// Set preset field values
				Preset_Field_Slot_Value$[1] = Preset[1].FieldSlot1Value;
				Preset_Field_Slot_Value$[2] = Preset[1].FieldSlot2Value;
				Preset_Field_Slot_Value$[3] = Preset[1].FieldSlot3Value;
				Preset_Field_Slot_Value$[4] = Preset[1].FieldSlot4Value;
				Preset_Field_Slot_Value$[5] = Preset[1].FieldSlot5Value;
				
				// Send welcome msg to schedule ineterface workday module
				To_SchedInterWork_Mod_DataIn$ =
				 "<WelcomeMsg>" + Preset[1].WelcomeMessage + "</WelcomeMsg>";
			}
			else
			{
				// Do not have valid preset data.
				
				// Enable button.
				Enable_Start_Meeting_Button = FALSE;
				
				// Clear button label.
				Start_Meeting_Button_Label$ = "";
				
				// Clear image locations.
				Preset_Image1$ = "";
				Preset_Image2$ = "";
				
				// Clear welcome message.
				Preset_Welcome_Msg$ = "";

				// Clear preset slot.
				Preset_Slot = 0;
				
				// Clear preset name.
				Preset_Name$ = "";
				
				// Clear preset field labels
				Preset_Field_Slot_Label$[1] = "";
				Preset_Field_Slot_Label$[2] = "";
				Preset_Field_Slot_Label$[3] = "";
				Preset_Field_Slot_Label$[4] = "";
				Preset_Field_Slot_Label$[5] = "";

				// Clear preset field values
				Preset_Field_Slot_Value$[1] = "";
				Preset_Field_Slot_Value$[2] = "";
				Preset_Field_Slot_Value$[3] = "";
				Preset_Field_Slot_Value$[4] = "";
				Preset_Field_Slot_Value$[5] = "";
				
				// Send empty welcome msg to schedule ineterface workday module
				To_SchedInterWork_Mod_DataIn$ =
				 "<WelcomeMsg></WelcomeMsg>";				
			}
		}
		else if (find("</EventIndex>", sRemoved))
		{
			// Event index.
			
			Preset[1].EventIndex	= atoi(left(sRemoved, len(sRemoved) - 13)); 	
		}
		else if (find("</StartDate>", sRemoved))
		{
			// Start date.
			
			Preset[1].StartDate	= left(sRemoved, len(sRemoved) - 12); 	
		}
		else if (find("</StartTime>", sRemoved))
		{
			// Start time.
			
			Preset[1].StartTime	= FormatTime(left(sRemoved, len(sRemoved) - 12)); 	
		}
		else if (find("</WelcomeMessage>", sRemoved))
		{
			// Welcome message.
			
			// Need to crop welcome message?
			if (len(sRemoved) > MAX_WELCOME_MSG_LEN + 17)
			{
				// Yes, need to trim.
				
				sRemoved = left(sRemoved, MAX_WELCOME_MSG_LEN - 4);
				sRemoved = sRemoved + " ...";
				
				Preset[1].WelcomeMessage	= sRemoved; 
			}
			else
			 Preset[1].WelcomeMessage	= left(sRemoved, len(sRemoved) - 17); 	
		}
		else if (find("</ImageSource1>", sRemoved))
		{
			// Image Source 1.
			
			Preset[1].ImageSource1 = left(sRemoved, len(sRemoved) - 15);
		}
		else if (find("</ImageSource2>", sRemoved))
		{
			// Image Source 2.
			
			Preset[1].ImageSource2 = left(sRemoved, len(sRemoved) - 15);
		}
		else if (find("<Preset Slot", sRemoved))
		{
			// First chunk of preset data.
			// <Preset Slot="n" Name="xxxxx">
			 
			// Get the slot
			iMarker1 = find("Slot=", sRemoved) + 6;
			iMarker2 = find("\x22", sRemoved, iMarker1);
			
			Preset[1].Slot = atoi(mid(sRemoved, iMarker1, 1));
			
			// Get the name
			iMarker1 = find("Name=", sRemoved) + 6;
			iMarker2 = find("\x22", sRemoved, iMarker1);
			
			Preset[1].Name = mid(sRemoved, iMarker1, iMarker2 - iMarker1); 
		}
		else if (find("<Field Slot", sRemoved))
		{
			// Field slot data
			// <Field Slot="1" Label="xxxxx" Value=""/>
			
			// Get the slot
			iMarker1 = find("Slot=", sRemoved) + 6;
			iMarker2 = find("\x22", sRemoved, iMarker1);
			
			iFieldSlot = atoi(mid(sRemoved, iMarker1, 1));
			
			// Get the label
			iMarker1 = find("Label=", sRemoved) + 7;
			iMarker2 = find("\x22", sRemoved, iMarker1);
			
			sFieldLabel = mid(sRemoved, iMarker1, iMarker2 - iMarker1);			

			// Get the value
			iMarker1 = find("Value=", sRemoved) + 7;
			iMarker2 = find("\x22", sRemoved, iMarker1);
			
			sFieldValue = mid(sRemoved, iMarker1, iMarker2 - iMarker1);
	 									
			cswitch (iFieldSlot)
			{
				case (1):
				{
					Preset[1].FieldSlot1Label = sFieldLabel;
					Preset[1].FieldSlot1Value = sFieldValue;
					
					break;
				}
				
				case (2):
				{
					Preset[1].FieldSlot2Label = sFieldLabel;
					Preset[1].FieldSlot2Value = sFieldValue;
					
					break;
				}
				
				case (3):
				{
					Preset[1].FieldSlot3Label = sFieldLabel;
					Preset[1].FieldSlot3Value = sFieldValue;
					
					break;
				}
				
				case (4):
				{
					Preset[1].FieldSlot4Label = sFieldLabel;
					Preset[1].FieldSlot4Value = sFieldValue;
					
					break;
				}
				
				case (5):
				{
					Preset[1].FieldSlot5Label = sFieldLabel;
					Preset[1].FieldSlot5Value = sFieldValue;
					
					break;
				}
			} 
		}
		
	} until (len(sData) = 0);
}



/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH SchedInterWork_Mod_Connected
{
	To_SchedInterWork_Mod_DataIn$ =
	 "<MeetingPresetModule>Hello</MeetingPresetModule>";
}

PUSH Start_Meeting
{
	if (Enable_Start_Meeting_Button)
	{		
		// Send started event to schedule interface workday module
		To_SchedInterWork_Mod_DataIn$ = 
		 "<StartedEvent>" + itoa(Preset[1].EventIndex) + "</StartedEvent>";
	}
}

PUSH End_Meeting
{
	// Send end meeting to schedule interface workday module
	To_SchedInterWork_Mod_DataIn$ = 
	 "<EndMeeting></EndMeeting>";
}

CHANGE From_SchedInterWork_Mod_DataOut$
{
	string sData[INPUT_BUFF_SIZE];
	
	if (g_bRXOK1)
	{
		g_bRXOK1 = FALSE;
		
		while(1)
		{
			sData = gather("</ScheduleInterfaceData>", From_SchedInterWork_Mod_DataOut$);

			if (find("<Type=\x22PresetData\x22 />", sData))
			{
				call ProcessPresetData(sData);			
			}	
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();
	
	g_bRXOK1 = TRUE;	

}


